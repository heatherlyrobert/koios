/*===============================[[ beg-code ]]===============================*/
#include    "master.munit"



char
koios_conv_defense (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify data defense");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_mincond  ("verify a quick success");
   yUNIT_minval   ("call defense"                       , CONV__defense (0xabcd    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with various nulls");
   yUNIT_minval   ("call defense"                       , CONV__defense (NULL      , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , NULL      , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , NULL                  , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , NULL             , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , NULL             , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , NULL        , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , NULL             , "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", NULL        , "10"  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , NULL  , "иииииии", '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , NULL     , '-', '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", 0  , '-', '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', 0  , '-', &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', 0  , &sm_share, &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', NULL     , &sm_select), -999);
   yUNIT_minval   ("call defense"                       , CONV__defense (0xFFFF    , "SHARED"  , "testing description" , "DITTO_parse"    , "x, y, 21"       , "i_lesser"  , "pretty expected", "rc"        , "10"  , "иииииии", '-', '-', '-', &sm_share, NULL      ), -999);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_conv_printf  (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify printf functionality");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_mincond  ("verify printing a format only");
   yUNIT_minval   ("write line"                         , CONV_printf    (sm_conv   , "format only\n"                  ),    0);
   yUNIT_minval   ("... check lines"                    , yENV_ulines    (sm_nconv)             , 1);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , '[')      , "format only"                              );
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with null file");
   yUNIT_minval   ("write line"                         , CONV_printf    (NULL      , "a mistake\n"                    ), -999);
   yUNIT_minval   ("... check lines"                    , yENV_ulines    (sm_nconv)             , 1);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , '[')      , "format only"                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify printing a single variable");
   yUNIT_minval   ("write line"                         , CONV_printf    (sm_conv   , "%s\n"                  , "testing"                  ),    0);
   yUNIT_minval   ("... check lines"                    , yENV_ulines    (sm_nconv)             , 2);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , '[')      , "format only"                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "testing"                                  );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with null format");
   yUNIT_minval   ("write line"                         , CONV_printf    (sm_conv   , NULL                    , "testing"                  ), -999);
   yUNIT_minval   ("... check lines"                    , yENV_ulines    (sm_nconv)             , 2);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , '[')      , "format only"                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "testing"                                  );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify printing a multiple variables");
   yUNIT_minval   ("write line"                         , CONV_printf    (sm_conv   , "%s (%d) %s\n"          , "whos"  , 52 , "heading"   ),    0);
   yUNIT_minval   ("... check lines"                    , yENV_ulines    (sm_nconv)             , 3);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , '[')      , "format only"                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "testing"                                  );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "whos (52) heading"                        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

/*> char                                                                                                                                                                                                                                                                                                                                                                                             <* 
 *> koios_conv_summary   (char a_scrp, char a_list, char a_unit)                                                                                                                                                                                                                                                                                                                                     <* 
 *> {                                                                                                                                                                                                                                                                                                                                                                                                <* 
 *>    yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify summary statistics lines");                                                                                                                                                                                                                                                                                                             <* 
 *>    if (a_list == '!')    { yUNIT_minprcs (); return 0; }                                                                                                                                                                                                                                                                                                                                         <* 
 *>    if (a_unit != 0 && a_scrp != a_unit)  return 0;                                                                                                                                                                                                                                                                                                                                               <* 
 *>    if (a_list == 'y')                    return 0;                                                                                                                                                                                                                                                                                                                                               <* 
 *>    KOIOS_open_all ('*', '-');                                                                                                                                                                                                                                                                                                                                                                    <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_mincond  ("verify intial SCRP");                                                                                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_minval   ("call summary"                       , CONV__summary   (sm_conv, ""            , 'P', "SCRP"  ,   1),    3);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             ,   0);                                                                                                                                                                                                                                                                                         <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '[')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("call summary unit"                  , CONV__summary   (sm_conv, ""            , '!', ""      ,   0),    2);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             ,   1);                                                                                                                                                                                                                                                                                         <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '[')      , "SCRP   P (  1/и)"                           );                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1       ,  666);                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_mindnoc  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_mincond  ("verify another SCRP");                                                                                                                                                                                                                                                                                                                                                       <* 
 *>    yUNIT_minval   ("call summary"                       , CONV__summary   (sm_conv, ""            , 'P', "SCRP"  ,   2),    1);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("call summary unit"                  , CONV__summary   (sm_conv, ""            , '!', ""      ,   0),    2);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             ,   5);                                                                                                                                                                                                                                                                                         <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  id         TOP    glob    shar    scrp       MIDDLE  cond    ditto and usage----   ---local-reuse---------------   ---global-reuse--------------   skip      STEPS    real    vars    void    skip ");   <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   PRCS       script statistics -----------------------------------------------   1         1     и     и     1        0     0     0  ииииииииии     0  и                        0  и                        0        0     0     0     0     0 ");                     <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SCRP   P (  2/и)"                           );                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1       ,  666);                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_mindnoc  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_mincond  ("verify SECT");                                                                                                                                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minval   ("call summary"                       , CONV__summary   (sm_conv, ""            , '-', "SECT"  ,   0),    1);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("call summary unit"                  , CONV__summary   (sm_conv, ""            , '!', ""      ,   0),    2);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             ,   9);                                                                                                                                                                                                                                                                                         <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  id         TOP    glob    shar    scrp       MIDDLE  cond    ditto and usage----   ---local-reuse---------------   ---global-reuse--------------   skip      STEPS    real    vars    void    skip ");   <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   PRCS       script statistics -----------------------------------------------   2         1     и     и     1        0     0     0  ииииииииии     0  и                        0  и                        0        0     0     0     0     0 ");                     <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SECT   - ( 45/-)"                           );                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1       ,  666);                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_mindnoc  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_mincond  ("verify another SCRP");                                                                                                                                                                                                                                                                                                                                                       <* 
 *>    yUNIT_minval   ("call summary"                       , CONV__summary   (sm_conv, ""            , 'P', "SCRP"  ,   3),    0);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("call summary unit"                  , CONV__summary   (sm_conv, ""            , '!', ""      ,   0),    2);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             , 10);                                                                                                                                                                                                                                                                                          <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , "SCRP   P (  3/и)"                           );                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1       ,  666);                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_mindnoc  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_mincond  ("verify a SHARED");                                                                                                                                                                                                                                                                                                                                                           <* 
 *>    yUNIT_minval   ("call summary"                       , CONV__summary   (sm_conv, ""            , 'S', "SHARED", 'c'),    1);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("call summary unit"                  , CONV__summary   (sm_conv, ""            , '!', ""      ,   0),    2);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             ,  14);                                                                                                                                                                                                                                                                                         <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  id         TOP    glob    shar    scrp       MIDDLE  cond    ditto and usage----   ---local-reuse---------------   ---global-reuse--------------   skip      STEPS    real    vars    void    skip ");   <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   PRCS       script statistics -----------------------------------------------   3         1     и     и     1        0     0     0  ииииииииии     0  и                        0  и                        0        0     0     0     0     0 ");                     <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SHARED S ( 99/c)"                           );                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1       ,  666);                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_mindnoc  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_mincond  ("verify another SCRP");                                                                                                                                                                                                                                                                                                                                                       <* 
 *>    yUNIT_minval   ("call summary"                       , CONV__summary   (sm_conv, ""            , 'P', "SCRP"  ,   4),    1);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("call summary unit"                  , CONV__summary   (sm_conv, ""            , '!', ""      ,   0),    2);                                                                                                                                                                                                                                                                  <* 
 *>    yUNIT_minval   ("... check lines"                    , yENV_ulines     (sm_nconv)             ,  18);                                                                                                                                                                                                                                                                                         <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  id         TOP    glob    shar    scrp       MIDDLE  cond    ditto and usage----   ---local-reuse---------------   ---global-reuse--------------   skip      STEPS    real    vars    void    skip ");   <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   DERAHS     local shared code statistics ------------------------------------   c         1     и     1     и        0     0     0  ииииииииии     0  и                        0  и                        0        0     0     0     0     0 ");                     <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SCRP   P (  4/и)"                           );                                                                                                                                                                                                                                               <* 
 *>    yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );                                                                                                                                                                                                                                                 <* 
 *>    yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1       ,  666);                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_mindnoc  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>                                                                                                                                                                                                                                                                                                                                                                                                  <* 
 *>    KOIOS_close_all ('*');                                                                                                                                                                                                                                                                                                                                                                        <* 
 *>    yUNIT_minprcs  ();                                                                                                                                                                                                                                                                                                                                                                            <* 
 *>    return 0;                                                                                                                                                                                                                                                                                                                                                                                     <* 
 *> }                                                                                                                                                                                                                                                                                                                                                                                                <*/

char
koios_conv_preps   (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char         x_name     [LEN_HUND]  = "/tmp/apate.unit";
   FILE        *x_file     = NULL;
   char         t          [LEN_HUND]  = "";
   char         x_cshare   =  '-';

   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify introductory verbs");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_mincond  ("verify writing a BREAK");
   yUNIT_minval   ("write conv line"                    , CONV__break     (sm_conv   ),    0);
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '[')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , 'о')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , 'о')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a PREP");
   yUNIT_minval   ("write conv line"                    , CONV__prep      (sm_conv   , "PREP"    , "prototype headers"   , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , 'о')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , 'о')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check resuls"                   , yENV_upeek      (sm_nconv  , 'о')      , "PREP          prototype headers                                                  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing an INCL");
   yUNIT_minval   ("write conv line"                    , CONV__incl      (sm_conv   , "incl"    , "public header"       , "apate.h"        , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check resuls"                   , yENV_uindex     (sm_nconv  , sm_vmark) , "   incl       public header                        apate.h                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a COMMENT");
   yUNIT_minval   ("write conv line"                    , CONV__comment   (sm_conv   , "#>"      , ""                    , ""               , ""               , ""          , "#> comment"     , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check resuls"                   , yENV_uindex     (sm_nconv  , sm_vmark) , "#> comment");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_conv_scrp_add  (char a_scrp, char a_list, char a_unit)
{
   char         x_suf      [LEN_TERSE] = "";
   char         x_cnt      [LEN_LABEL] = "";

   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify script adds");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   CONV_force ( 5, 32);
   yUNIT_mincond  ("verify SCRP without stage");
   yUNIT_minval   ("call for SCRP without stage"        , CONV__scrp_add  ('y' , "SCRP"  , '-'  , ""    , x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "[ии/и]");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((05.---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify SECT");
   yUNIT_minval   ("call for SECT"                      , CONV__scrp_add  (',' , "SECT"  , '-'  , ""    , x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((--.---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify SHARED");
   yUNIT_minval   ("call for SHARED"                    , CONV__scrp_add  ('-' , "SHARED", 'd'  , ""    , x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "-d-");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((dd.---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , 'd');
   yUNIT_mindnoc  ();

   CONV_force ( 6, 32);
   yUNIT_mincond  ("verify SCRP with stage");
   yUNIT_minval   ("call for SCRP with stage"           , CONV__scrp_add  ('y' , "SCRP"  , '-'  , "3f"  , x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "[3f/и]");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((06.---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify GLOBAL");
   yUNIT_minval   ("call for GLOBAL"                    , CONV__scrp_add  ('-' , "GLOBAL", 'V'  , ""    , x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "-V-");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((VV.---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , 'V');
   yUNIT_mindnoc  ();

   CONV_force ( 7, 32);
   yUNIT_mincond  ("verify SCRP with big stage");
   yUNIT_minval   ("call for SCRP with big stage"       , CONV__scrp_add  ('y' , "SCRP"  , '-'  , "3f/k", x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "[3f/k]");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((07.---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify CONFIG");
   yUNIT_minval   ("call for CONFIG"                    , CONV__scrp_add  ('-' , "CONFIG", ' '  , ""    , x_suf, x_cnt, &sm_share),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "- -");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((  .---))");
   yUNIT_minchr   ("... check sm_share"                 , sm_share         , ' ');
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_conv_scrps   (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify script level verbs");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_force_prog (  9,  4, 32);
   yUNIT_mincond  ("verify writing a SCRP without stage");
   yUNIT_minval   ("write conv line"                    , CONV__scrp      (sm_conv   , "SCRP"    , "test funky thing"    , "func1, func2"   , ""               , "5m"        , ""               , "funky"     , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 6);
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '[')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SCRP  [ии/и]  test funky thing                                                    5m  funky           func1, func2                                                                 ((10.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a SCRP with stage");
   yUNIT_minval   ("write conv line"                    , CONV__scrp      (sm_conv   , "SCRP"    , "critical test"       , "yURG_huge"      , ""               , "3s"        , ""               , "BOOMy"     , "2b/f" , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 15);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   PRCS       script statistics -----------------------------------------------  10     1     0     0     1     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SCRP  [2b/f]  critical test                                                       3s  BOOMy           yURG_huge                                                                    ((11.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a SECT");
   yUNIT_minval   ("write conv line"                    , CONV__sect      (sm_conv   , "SECT"    , "big stuff here"      , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 24);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   PRCS       script statistics -----------------------------------------------  11     1     0     0     1     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SECT          big stuff here                                                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a SHARED");
   yUNIT_minval   ("write conv line"                    , CONV__shared    (sm_conv   , "SHARED"  , "in the same file"    , ""               , ""               , "0s"        , ""               , "simple"    , ""     , "иииииии", '-', 'a', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 30);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SHARED   -a-  in the same file                                                    0s  simple                                                                                       ((aa.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a GLOBAL");
   yUNIT_minval   ("write conv line"                    , CONV__shared    (sm_conv   , "GLOBAL"  , "in the master file"  , ""               , ""               , "5s"        , ""               , "central"   , ""     , "иииииии", '-', 'Z', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 39);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   DERAHS     local shared code statistics ------------------------------------   a     1     0     1     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "GLOBAL   -Z-  in the master file                                                  5s  central                                                                                      ((ZZ.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a CONFIG");
   yUNIT_minval   ("write conv line"                    , CONV__shared    (sm_conv   , "CONFIG"  , ""                    , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', 'Ы', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 48);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   LABOLG     global shared code statistics -----------------------------------   Z     1     1     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "CONFIG   -Ы-                                                                                                                                                                       ((ЫЫ.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a SECT");
   yUNIT_minval   ("write conv line"                    , CONV__sect      (sm_conv   , "SECT"    , "big stuff here"      , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)               , 57);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "   GIFNOC     global shared code statistics -----------------------------------   Ы     1     1     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , ""                                         );
   yUNIT_minstr   ("... ruler"                          , yENV_upeek      (sm_nconv  , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... title"                          , yENV_upeek      (sm_nconv  , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "SECT          big stuff here                                                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , '>')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_conv_cond_add   (char a_scrp, char a_list, char a_unit)
{
   char         x_suf      [LEN_SHORT] = "";
   char         x_cnt      [LEN_LABEL] = "";

   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify condition level verbs");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   CONV_force ( 2, 33);
   yUNIT_mincond  ("verify common outputs");
   yUNIT_minval   ("call common"                        , CONV__cond_add  ('-'  , '-'  , '-'  , '-'  , x_suf, x_cnt),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((02.033))");
   yUNIT_mindnoc  ();

   CONV_force ( 2, 34);
   yUNIT_mincond  ("verify common outputs");
   yUNIT_minval   ("call marked"                        , CONV__cond_add  ('2'  , '-'  , '-'  , '-'  , x_suf, x_cnt),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "(2)");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((02.034))");
   yUNIT_mindnoc  ();

   CONV_force ( 2, 35);
   yUNIT_mincond  ("verify common outputs");
   yUNIT_minval   ("call inside shared"                 , CONV__cond_add  ('-'  , 'b'  , '-'  , '-'  , x_suf, x_cnt),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "b/*");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((02.035))");
   yUNIT_mindnoc  ();

   CONV_force ( 2, 36);
   yUNIT_mincond  ("verify common outputs");
   yUNIT_minval   ("call shared"                        , CONV__cond_add  ('-'  , '-'  , '-'  , 'c'  , x_suf, x_cnt),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((cc.036))");
   yUNIT_mindnoc  ();

   CONV_force ( 2, 37);
   yUNIT_mincond  ("verify new-style reuse");
   yUNIT_minval   ("call inside shared"                 , CONV__cond_add  ('-'  , 'Ы'  , 'f'  , '-'  , x_suf, x_cnt),    0);
   yUNIT_minstr   ("... check suffix"                   , x_suf            , "Ы/f");
   yUNIT_minstr   ("... check count"                    , x_cnt            , "((02.037))");
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_conv_conds   (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char         x_suf      [LEN_SHORT] = "";
   char         x_cnt      [LEN_LABEL] = "";
   char         x_name     [LEN_HUND]  = "/tmp/apate.unit";
   char         t          [LEN_HUND]  = "";
   FILE        *x_file     = NULL;
   char         x_cshare   =  '-';

   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify condition level verbs");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_force_prog (  2, 36,  1);

   yUNIT_mincond  ("verify writing a COND not marked");
   yUNIT_minval   ("write conv line"                    , CONV__cond      (sm_conv   , "COND"    , "initialize"          , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 2);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   COND       initialize                                                         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.037))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a COND with mark");
   yUNIT_minval   ("write conv line"                    , CONV__cond      (sm_conv   , "COND"    , "setting a mark"      , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '2', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 4);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   COND  (2)  setting a mark                                                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.038))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   sm_share = 'b';
   yUNIT_mincond  ("verify writing a COND in a share");
   yUNIT_minval   ("write conv line"                    , CONV__cond      (sm_conv   , "COND"    , "within a share"      , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 6);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   COND       within a share                                                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((bb.039))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();
   sm_share = '-';

   yUNIT_mincond  ("verify writing a DITTO");
   yUNIT_minval   ("write conv line"                    , CONV__ditto     (sm_conv   , "DITTO"   , "call back desc"      , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '5', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 8);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   DITTO (5)  call back desc                                                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.040))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a REUSE (old-style)");
   yUNIT_minval   ("write conv line"                    , CONV__reuse     (sm_conv   , "REUSE"   , "call share"          , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', 's', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 10);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   REUSE s/*  call share                                                         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.041))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a REUSE (new-style)");
   yUNIT_minval   ("write conv line"                    , CONV__reuse     (sm_conv   , "REUSE"   , "call share"          , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', 'Ы', 'b', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 12);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   REUSE Ы/b  call share                                                         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.042))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a GROUP");
   yUNIT_minval   ("write conv line"                    , CONV__group     (sm_conv   , "GROUP"   , "connected stuff"     , ""               , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check count"                    , yENV_ulines     (sm_nconv)             , 14);
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv  , sm_vmark) , ""                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "   GROUP      ===[[ connected stuff ]]=========================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_conv_steps   (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("koios", "koios_conv", "(CONV) verify step level verbs");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_mincond  ("verify writing an EXEC");
   yUNIT_minval   ("write conv line"                    , CONV__exec     (sm_conv   , "exec"    , "call the function"   , "DITTO_parse"    , "x, y, 21"       , "s_equal"   , "pretty expected", "x_str"     , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     exec     call the function                    DITTO_parse                 x, y, 21                                                                                              s_equal     pretty expected                                                                                       x_str                ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a LOAD");
   yUNIT_minval   ("write conv line"                    , CONV__load     (sm_conv   , "load"    , "prepare input"       , "stdin"          , ""               , ""          , "test Д 15 Д a"  , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     load     prepare input                        stdin                       test Д 15 Д a                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a MODE");
   yUNIT_minval   ("write conv line"                    , CONV__load     (sm_conv   , "mode"    , "change mode"         , "FORCED_FAIL"    , ""               , ""          , ""               , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     mode     change mode                          FORCED_FAIL                                                                                                                                                                                                                                            ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a FILE");
   yUNIT_minval   ("write conv line"                    , CONV__file     (sm_conv   , "file"    , "read for writing"    , ""               , ""               , ""          , "[[ my.file ]]"  , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     file     read for writing                     - - - - - - - - - - - - -   [[ my.file ]]                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing an APPEND");
   yUNIT_minval   ("write conv line"                    , CONV__append   (sm_conv   , "append"  , "... add a record"    , ""               , ""               , ""          , "nice data"      , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     append   ... add a record                     - - - - - - - - - - - - -   nice data                                                                                                                                                                                                                  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing an APPVIS");
   yUNIT_minval   ("write conv line"                    , CONV__append   (sm_conv   , "appvis"  , "... add a record"    , ""               , ""               , ""          , "nice data"      , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     appvis   ... add a record                     - - - - - - - - - - - - -   nice data                                                                                                                                                                                                                  ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a CODE");
   yUNIT_minval   ("write conv line"                    , CONV__code     (sm_conv   , "code"    , "update prefix"       , ""               , ""               , ""          , "x_one = 13;"    , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     code     update prefix                        - - - - - - - - - - - - -   x_one = 13;                                                                                                                                                                                                                ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a global variable");
   yUNIT_minval   ("write conv line"                    , CONV__gvar     (sm_conv   , "global"  , "global variable"     , ""               , ""               , ""          , "short a = 5;"   , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "   global     global variable                      - - - - - - - - - - - - -   short a = 5;                                                                                                                                                                                                               ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing a local variable");
   yUNIT_minval   ("write conv line"                    , CONV__gvar     (sm_conv   , "local"   , "local variable"      , ""               , ""               , ""          , "char rc = 0;"   , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "   local      local variable                       - - - - - - - - - - - - -   char rc = 0;                                                                                                                                                                                                               ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify writing an ECHO");
   yUNIT_minval   ("write conv line"                    , CONV__echo     (sm_conv   , "echo"    , "... check value"     , ""               , "x_act"          , "s_equal"   , "[[ x_exp ]]"    , ""          , ""     , "иииииии", '-', '-', '-', &sm_share, &sm_select),    0);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nconv  , sm_vmark) , "     echo     ... check value                      - - - - - - - - - - - - -   x_act                                                                                                 s_equal     [[ x_exp ]]                                                                                          ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nconv  , 'о')      , "(n/a)"                                    );
   yUNIT_minval   ("... save spot"                      , sm_vmark = yENV_uwhere    () + 1         ,  666);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =  '-';
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(startup)------------------------*/
   yUNIT_minunit ("koios_conv");
   /*---(scripts)------------------------*/
   koios_conv_defense   (++n, x_list, x_unit);
   koios_conv_printf    (++n, x_list, x_unit);
   /*> koios_conv_summary   (++n, x_list, x_unit);                                    <*/
   koios_conv_preps     (++n, x_list, x_unit);
   koios_conv_scrp_add  (++n, x_list, x_unit);
   koios_conv_scrps     (++n, x_list, x_unit);
   koios_conv_cond_add  (++n, x_list, x_unit);
   koios_conv_conds     (++n, x_list, x_unit);
   koios_conv_steps     (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   if (x_list == '-')  yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

