.TH koios 1 2016-May linux "command-line initiation, use, and options"

.SH NAME
koios \- c language unit testing meta-language and parser

.SH PATRON
.B koios-polos
(axis of heaven) titan of intelligence and farsight

.SH IMAGERY
northern star around which all the other consellations revolve

.SH SUMMARY
koios is a meta-language and related parser to simplify, standardize, and
make executable unit tests for the c language.  it is integrated with yUNIT,
yVAR, and ouroborus (on a system-wide basis).

.SH CAVEAT
nobody else will likely ever use my programs or shared libraries ;) i focus
on tracing, debugging, keyboard centric usage, the one true language (c),
and experimental/crazy designs.  dedicated dog-fooder, no time to coddle.

.SH DOCUMENTATION FILES
.nf  
.B koios (1)··········command-line initiation, use, and options
koios (5)          structure of config, files, and streams
koios (7)          decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) synopsis        simple run examples
b) validation      reviewing scripts for quality
c) conversion      updating and cleaning-up scripts
d) generation      creating c source code for unit test
e) compilation     turning c source into executables
f) run-time        running unit tests

.SH A) SYNOPSIS

.B koios [BASENAME]
.nf
primary production version

.B koios_debug [URGENTS] [BASENAME]
.nf
performs all production actions, but with debugging and tracing

.SH B) VALIDATION
koios can read unit test source description and validate it for quality.
the input file is untouched.

if validation fails, error messages are generated.  these error messages
include the file name, input line number, and a description to aid in debugging.
this is not a perfect process, some unit tests can pass and yet not compile.
buyer beware.

.B koios --validate åexampleæ

this will look for the file åexample.unitæ.  if åmaster.unitæ has not be
processed before, all GLOBAL references will fail.

.SH C) CONVERSION
koios will read the unit test source description, validate as discussed above,
and clean up the formatting.

if the validation passes, the source file åexample.unitæ will be renamed
åexample.unit.oldæ and the new, cleaned-up file uses the original name.
if validation fails, the file is untouched.

.B koios --convert åexampleæ

this will look for the file åexample.unitæ.  if åmaster.unitæ has not be
processed before, all GLOBAL references will fail.

.SH D) GENERATION
koios will read the unit test source descripion, validate as discussed above,
and generate the necessary c source code to match the request.

if the validation passes, the output c source file åexample_unit.csæ will
be produced.  copy to åexample_unit.cæ and compile with gcc linked to
-lyUNIT_debug and -lyVAR_debug.

.B koios --generate åexampleæ

this will look for the file åexample.unitæ.  if åmaster.unitæ has not be
processed before, all GLOBAL references will fail.

.SH E) COMPILATION
this is a very standard process using gcc.  my custom make framework does this
automatically with ",qu".  it is a short process.
   1) copies åexample_unit.csæ to åexample_unit.cæ
   2) compiles them both
   3) links c to libraries and generates åexample_unitæ
   4) links cs to libraries and generates åexample_unit_debugæ

for the normal version, the libraries in question are -lyUNIT and -lyVAR.  then
also link to all program objects except the one with main.  koios automatically
generates its own main.

for the debug version, the libraries in question are -lyUNIT_debug and
-lyVAR_debug.  then also link to all program debug objects except the one
with main.  koios automatically generates its own main.

anyone who does not use a debug version regularly is amazing.  i am a much
less perfect creature ;) i am aware of my short-comings.

.SH F) RUN-TIME
after compilation, the resulting unit testing programs have a short list of
options primarily focused on which parts of the file to run (execution scope),
how verbose the output (execution verbosity), color formatting, and whether
to provide information on the test vs execute it (information only).

.SS execution scope
when running the unit test program, you may run either all units, all scripts
in a single unit, or a single script.  in development, it is very common to
run single scripts.  later, typically either the full unit is run, the master
unit test, or ouroboros is used.

.B --all
.RS 8
run all contained scipts and conditions (default)
.RE

.B <nn>
.RS 8
run all conditions in script <nn> (two digits 00 to 99)
.RE

.B make allunit
.RS 8
runs all units in alphabetical order
.RE

.SS execution verbosity
a full unit test produces a great deal of output, tracking every script,
condition, and step.  sometimes the tester wishes to focus the output a little
finer.  the options below start with none and each new option is cumulative,
i.e., the option below includes all above.

.B --none, --quiet
.RS 8
no output only, just a return code, neg=fail vs zero/pos=pass
.RE

.B --test
.RS 8
one line with test level summary numbers
.RE

.B --scrp
.RS 8
one line of stats per test and script
.RE

.B --cond
.RS 8
one line of stats per test, script, and condition
.RE

.B --step
.RS 8
one line of stats per test, script, condition, and step
.RE

.B --full, --loud
.RS 8
show all including actual vs expected comparision (default)
.RE

.SS color formatting
unit test output is formatted to display in a 80 column terminal using only
7bit-safe ascii characters so this framework is as portable as possible.  but,
coloration is useful in its normal execution environment of a color eterm/aterm.

.B --eterm
.RS 8
colorize output for a 16 color terminal emulator
.RE

.B --console
.RS 8
do not colorize output so it can run in a console session
.RE

.SS information only
it is often important to get an overview or retrieve reference/index numbers
for a particular script or condition.  the following options enable that.

.B --scrps
.RS 8
display list of all available script headers
.RE

.B --conds, <nn> --conds
.RS 8
display list of all script and condition headers
.RE

.B --steps, <nn> --steps
.RS 8
display list of all script and condition headers
.RE

.SH BUGS and CONCERNS
koios depends on proper formatting of the input meta-language file.  if the
file lacks a double quote or delimiter in the correct place, the resulting
errors when compiling the c source for the unit test can be difficult to
track down.

.SH AUTHOR
rsheatherly  can be reached at jelloshrke at gmail dot com

.SH COLOPHON
this page is part of a documentation package mean to make the use of the
heatherly tools easier and faster.
.pl
