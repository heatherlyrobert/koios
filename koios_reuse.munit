/*===============================[[ beg-code ]]===============================*/
#include    "koios.h"


/*> ,xииVи:s/┤/р/gдииVи:s/-/и/gдии0и113|иvи31lиdи80|иpии0и80|иaи   риии   Ции186|иiр   Ции/REUSE__usedдииNииcwyUNIT_reuse_used Цииnии,y   <*/

char  *s_wave     = "/tmp/master.wave";
char  *s_error    = "/tmp/apate_errors.txt";


/*> char                                                                                           <* 
 *> koios_reuse_index  (char a_scrp, char a_list, char a_unit)                                     <* 
 *> {                                                                                              <* 
 *>    /+---(header)-------------------------+/                                                    <* 
 *>    yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) retrieving reuse indexes");                <* 
 *>    if (a_list == '!')    { yUNIT_minprcs (); return 0; }                                       <* 
 *>    if (a_unit != 0 && a_scrp != a_unit)  return 0;                                             <* 
 *>    if (a_list == 'y')                    return 0;                                             <* 
 *>    PROG__unit_quiet  ();                                                                       <* 
 *>    yerr_uopen ();                                                                              <* 
 *>                                                                                                <* 
 *>    yUNIT_mincond ("verify on valid indexes");                                                  <* 
 *>    yUNIT_minval  ("... run A"                          , REUSE__index ('A'),   0          );   <* 
 *>    yUNIT_minval  ("... run L"                          , REUSE__index ('L'),  11          );   <* 
 *>    yUNIT_minval  ("... run Y"                          , REUSE__index ('Y'),  24          );   <* 
 *>    yUNIT_minval  ("... run e"                          , REUSE__index ('e'),  26 +  4     );   <* 
 *>    yUNIT_minval  ("... run q"                          , REUSE__index ('q'),  26 + 16     );   <* 
 *>    yUNIT_minval  ("... run a"                          , REUSE__index ('z'),  26 + 25     );   <* 
 *>    yUNIT_minval  ("... run Ж"                          , REUSE__index ('Ж'),  26 + 26 +  2);   <* 
 *>    yUNIT_minval  ("... run  "                          , REUSE__index (' '),  26 + 26 + 23);   <* 
 *>    yUNIT_mindnoc ();                                                                           <* 
 *>                                                                                                <* 
 *>    yUNIT_mincond ("verify null handling");                                                     <* 
 *>    yUNIT_minval  ("... run NULL"                       , REUSE__index (0 ), -999);             <* 
 *>    yUNIT_mindnoc ();                                                                           <* 
 *>                                                                                                <* 
 *>    yUNIT_mincond ("verify defaultish");                                                        <* 
 *>    yUNIT_minval  ("... run space"                      , REUSE__index (' '), -999);            <* 
 *>    yUNIT_minval  ("... run -"                          , REUSE__index ('-'), -999);            <* 
 *>    yUNIT_minval  ("... run и"                          , REUSE__index ('и'), -999);            <* 
 *>    yUNIT_mindnoc ();                                                                           <* 
 *>                                                                                                <* 
 *>    yUNIT_mincond ("attempt invalid indexes");                                                  <* 
 *>    yUNIT_minval  ("... run ?"                          , REUSE__index ('5'), -999);            <* 
 *>    yUNIT_minval  ("... run +"                          , REUSE__index ('+'), -999);            <* 
 *>    yUNIT_minval  ("... run ┤"                          , REUSE__index ('┤'), -999);            <* 
 *>    yUNIT_minval  ("... run ┤"                          , REUSE__index ('='), -999);            <* 
 *>    yUNIT_mindnoc ();                                                                           <* 
 *>                                                                                                <* 
 *>    PROG__unit_end    ();                                                                       <* 
 *>    yUNIT_minprcs ();                                                                           <* 
 *>    return 0;                                                                                   <* 
 *> }                                                                                              <*/

/*> char                                                                                                                                                                                 <* 
 *> koios_reuse_set    (char a_scrp, char a_list, char a_unit)                                                                                                                           <* 
 *> {                                                                                                                                                                                    <* 
 *>    char        x_cwd       [LEN_FULL]  = "";                                                                                                                                         <* 
 *>                                                                                                                                                                                      <* 
 *>    char        x_desc      [LEN_LONG]  = "";                                                                                                                                         <* 
 *>    /+---(header)-------------------------+/                                                                                                                                          <* 
 *>    yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) setting and getting reuse values");                                                                                              <* 
 *>    if (a_list == '!')    { yUNIT_minprcs (); return 0; }                                                                                                                             <* 
 *>    if (a_unit != 0 && a_scrp != a_unit)  return 0;                                                                                                                                   <* 
 *>    if (a_list == 'y')                    return 0;                                                                                                                                   <* 
 *>    getcwd  (x_cwd, LEN_FULL);                                                                                                                                                        <* 
 *>    chdir   ("/tmp/");                                                                                                                                                                <* 
 *>    PROG__unit_quiet  ();                                                                                                                                                             <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify clean start");                                                                                                                                             <* 
 *>    yUNIT_minval  ("... init"                           , REUSE_init ()       , 0);                                                                                                   <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL ┤-----┤-----┤-----┤-----┤-   SH ┤-----┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify showing detail on full empty");                                                                                                                            <* 
 *>    yUNIT_minstr  ("show detail (NULL)"                 , REUSE__detail ( 0 ) , "- и ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  иииииииии  ¤");            <* 
 *>    yUNIT_minstr  ("show detail (symbol)"               , REUSE__detail ('?') , "- и ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  иииииииии  ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('A') , "A m ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('M') , "M m ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_minstr  ("show detail (number)"               , REUSE__detail ('5') , "- и ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  иииииииии  ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('b') , "b r ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_minstr  ("show detail (spacer)"               , REUSE__detail ('и') , "- и ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  иииииииии  ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('s') , "s r ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('Ж') , "Ж c ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_minstr  ("show detail (space)"                , REUSE__detail (' ') , "- и ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  иииииииии  ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('Ы') , "Ы c ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail (' ') , "  c ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting a reuse mark");                                                                                                                                    <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('A', 123, "verify something")    , 1);                                                                          <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL A-----┤-----┤-----┤-----┤-   SH ┤-----┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('A') , "A m  123  verifyиsomething                                     ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify re-setting a mark");                                                                                                                                       <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('A',  52, "check another"   )    , 1);                                                                          <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL A-----┤-----┤-----┤-----┤-   SH ┤-----┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('A') , "A m   52  checkиanother                                        ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("attempt to set illegal marks");                                                                                                                                   <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('/',   1, "verify something")    , -999);                                                                       <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set (' ',   1, "verify something")    , -999);                                                                       <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting another global");                                                                                                                                  <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('M', 678, "big shared global")   , 1);                                                                          <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL A-----┤-----M-----┤-----┤-   SH ┤-----┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('M') , "M m  678  bigиsharedиglobal                                    ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting shared reuse mark");                                                                                                                               <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('z',  22, "monster trouble" )    , 1);                                                                          <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL A-----┤-----M-----┤-----┤-   SH ┤-----┤-----┤-----┤-----┤z   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('z') , "z r   22  monsterиtrouble                                      ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting another shared reuse mark");                                                                                                                       <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('b', 287, "simple repeat check") , 1);                                                                          <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL A-----┤-----M-----┤-----┤-   SH ┤b----┤-----┤-----┤-----┤z   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('b') , "b r  287  simpleиrepeatиcheck                                  ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting a config reuse mark");                                                                                                                             <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set ('Ж',  32, "house keeping")       , 1);                                                                          <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL A-----┤-----M-----┤-----┤-   SH ┤b----┤-----┤-----┤-----┤z   CO ┤-Ж---┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('Ж') , "Ж c   32  houseиkeeping                                        ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify checking all marks");                                                                                                                                      <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('A') , "A m   52  checkиanother                                        ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('M') , "M m  678  bigиsharedиglobal                                    ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('b') , "b r  287  simpleиrepeatиcheck                                  ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('z') , "z r   22  monsterиtrouble                                      ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('Ж') , "Ж c   32  houseиkeeping                                        ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify purging marks");                                                                                                                                           <* 
 *>    yUNIT_minval  ("... purge"                          , REUSE_init  ()      , 0);                                                                                                   <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL ┤-----┤-----┤-----┤-----┤-   SH ┤-----┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('A') , "A m ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('M') , "M m ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('b') , "b r ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('z') , "z r ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('Ж') , "Ж c ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting by record");                                                                                                                                       <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set_recd ('f', 987,  0, "SHARE -f-  description field " )    , 1);                                                 <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL ┤-----┤-----┤-----┤-----┤-   SH ┤----f┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('f') , "f r  987  descriptionиfield                                    ииии ииии  SHARED     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting by record (with spaces)");                                                                                                                         <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set_recd ('M', 789,  0, "GLOBAL -M-        indented        " )    , 1);                                            <* 
 *>    yUNIT_minstr  ("... review marks"                   , REUSE__used ()      , "GL ┤-----┤-----M-----┤-----┤-   SH ┤----f┤-----┤-----┤-----┤-   CO ┤-----┤-----┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('M') , "M m  789  indented                                             ииии ииии  GLOBAL     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    yUNIT_mincond ("verify setting by record (config)");                                                                                                                              <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set_recd ('Ы', 789,  0, "GLOBAL -Ы-     lovely comment     " )    , 1);                                            <* 
 *>    yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "GL ┤-----┤-----M-----┤-----┤-   SH ┤----f┤-----┤-----┤-----┤-   CO ┤-----┤---Ы-┤-----┤-----   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail ('Ы') , "Ы c  789  lovelyиcomment                                       ииии ииии  CONFIG     ¤");            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                 <* 
 *>                                                                                                                                                                                      <* 
 *>    PROG__unit_end    ();                                                                                                                                                             <* 
 *>    chdir   (x_cwd);                                                                                                                                                                  <* 
 *>    yUNIT_minprcs ();                                                                                                                                                                 <* 
 *>    return 0;                                                                                                                                                                         <* 
 *> }                                                                                                                                                                                    <*/

/*> char                                                                                                                                                                                                       <* 
 *> koios_reuse_update (char a_scrp, char a_list, char a_unit)                                                                                                                                                 <* 
 *> {                                                                                                                                                                                                          <* 
 *>    /+---(locals)-----------+-----+-----+-+/                                                                                                                                                                <* 
 *>    char        x_type      =  '-';                                                                                                                                                                         <* 
 *>    char        x_tdesc     [LEN_TERSE] = "";                                                                                                                                                               <* 
 *>    int         x_line      =    0;                                                                                                                                                                         <* 
 *>    char        x_desc      [LEN_LONG]  = "";                                                                                                                                                               <* 
 *>    short       x_conds     =    0;                                                                                                                                                                         <* 
 *>    short       x_steps     =    0;                                                                                                                                                                         <* 
 *>    int         x_CONDS     =   50;                                                                                                                                                                         <* 
 *>    int         x_STEPS     =  253;                                                                                                                                                                         <* 
 *>    /+---(header)-------------------------+/                                                                                                                                                                <* 
 *>    yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) setting and getting reuse values");                                                                                                                    <* 
 *>    if (a_list == '!')    { yUNIT_minprcs (); return 0; }                                                                                                                                                   <* 
 *>    if (a_unit != 0 && a_scrp != a_unit)  return 0;                                                                                                                                                         <* 
 *>    if (a_list == 'y')                    return 0;                                                                                                                                                         <* 
 *>    PROG__unit_quiet  ();                                                                                                                                                                                   <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("prepare a dataset");                                                                                                                                                                    <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     ('A',  52, "very first mark" )    , 1);                                                                                            <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     ('M', 678, "big shared global")   , 1);                                                                                            <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     ('b', 287, "simple repeat check") , 1);                                                                                            <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     ('z',  22, "monster trouble" )    , 1);                                                                                            <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     ('Ж',  32, "house keeping")       , 1);                                                                                            <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     ('Ы', 789, "lovely comment")      , 1);                                                                                            <* 
 *>    yUNIT_minval  ("call set"                           , REUSE__set     (' ', 666, "terminal mark")       , 1);                                                                                            <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("verify checking all marks");                                                                                                                                                            <* 
 *>    yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used   ()      , "и   риии   SH рbиииирииииирииииирииииирz   GL AииииириииииMииииирииииири   CO риЖииириииЫирииииириииии   !   ¤");   <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('A') , "A m   52  veryиfirstиmark                                      ииии ииии  GLOBAL     ¤");                                 <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('M') , "M m  678  bigиsharedиglobal                                    ииии ииии  GLOBAL     ¤");                                 <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('b') , "b r  287  simpleиrepeatиcheck                                  ииии ииии  SHARED     ¤");                                 <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('z') , "z r   22  monsterиtrouble                                      ииии ииии  SHARED     ¤");                                 <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('Ж') , "Ж c   32  houseиkeeping                                        ииии ииии  CONFIG     ¤");                                 <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('Ы') , "Ы c  789  lovelyиcomment                                       ииии ииии  CONFIG     ¤");                                 <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  (' ') , "  c  666  terminalиmark                                        ииии ииии  CONFIG     ¤");                                 <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("verify quick update config success");                                                                                                                                                   <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ('Ы',  10, 25)           ,    1);                                                                                                  <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('Ы') , "Ы c  789  lovelyиcomment                                         10   25  CONFIG     ¤");                                 <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("verify quick addback config success");                                                                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('Ы', &x_CONDS, &x_STEPS),    1);                                                                                                  <* 
 *>    yUNIT_minval  ("... new conds"                      , x_CONDS ,  60);                                                                                                                                   <* 
 *>    yUNIT_minval  ("... new steps"                      , x_STEPS , 278);                                                                                                                                   <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("attempt NULL abbr");                                                                                                                                                                    <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ( 0 ,  10, 25)           , -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ( 0 , &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("attempt illegal abbr");                                                                                                                                                                 <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ('5',  10, 25)           , -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('5', &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   (' ',  10, 25)           , -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  (' ', &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ('?',  10, 25)           , -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('?', &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ('-',  10, 25)           , -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('-', &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("attempt updates on unset marks");                                                                                                                                                       <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ('P',  10, 25)           , -999);                                                                                                  <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('P', &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('P') , "P m ииии  ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤ и и и и ┤  ииии ииии  GLOBAL     ¤");                                 <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("attempt addback on un-updated mark");                                                                                                                                                   <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('M', &x_CONDS, &x_STEPS), -999);                                                                                                  <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('M') , "M m  678  bigиsharedиglobal                                    ииии ииии  GLOBAL     ¤");                                 <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("verify updating shared");                                                                                                                                                               <* 
 *>    yUNIT_minval  ("call update"                        , REUSE_update   ('b',  24, 156)          ,    1);                                                                                                  <* 
 *>    yUNIT_minstr  ("show detail"                        , REUSE__detail  ('b') , "b r  287  simpleиrepeatиcheck                                    24  156  SHARED     ¤");                                 <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    yUNIT_mincond ("verify addback on shared");                                                                                                                                                             <* 
 *>    yUNIT_minval  ("call addback"                       , REUSE_addback  ('b', &x_CONDS, &x_STEPS),    1);                                                                                                  <* 
 *>    yUNIT_minval  ("... new conds"                      , x_CONDS ,  84);                                                                                                                                   <* 
 *>    yUNIT_minval  ("... new steps"                      , x_STEPS , 434);                                                                                                                                   <* 
 *>    yUNIT_mindnoc ();                                                                                                                                                                                       <* 
 *>                                                                                                                                                                                                            <* 
 *>    PROG__unit_end    ();                                                                                                                                                                                   <* 
 *>    yUNIT_minprcs ();                                                                                                                                                                                       <* 
 *>    return 0;                                                                                                                                                                                               <* 
 *> }                                                                                                                                                                                                          <*/

char
koios_reuse_delimit (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_share     =  '-';
   char        x_index     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) checking delimiters while parsing");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();
   yerr_uopen    ();

   yUNIT_mincond ("verify quick success");
   yerr_ureset   ();
   yUNIT_minval  ("... run check"                      , REUSE__parse_delimit ("function_name", "scrp_name",  4, "GLOBAL", "GLOBAL -A-", "-A-", 0, '-', "-A-"),    0);
   yUNIT_minstr  ("... which error"                    , yerr_uwhich (), "/tmp/ylog_errors.txt");
   yUNIT_minval  ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minstr  ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt with bad leader");
   yerr_ureset   ();
   yUNIT_minval  ("... run check"                      , REUSE__parse_delimit ("function_name", "scrp_name",  5, "GLOBAL", "GLOBAL (A)", "(A)", 0, '-', "-A-"), -999);
   yUNIT_minstr  ("... which error"                    , yerr_uwhich (), "/tmp/ylog_errors.txt");
   yUNIT_minval  ("... error count"                    , yerr_ulines (),    1);
   yUNIT_minstr  ("... check error message"            , yerr_upeek   ('['), "scrp_name:5:0: error: verb тGLOBALТ from prefix тGLOBAL (A)Т with label т(A)Т has leading (() instead of (-), e.g., т-A-Т");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt with bad leader");
   yerr_ureset   ();
   yUNIT_minval  ("... run check"                      , REUSE__parse_delimit ("function_name", "scrp_name",  6, "GLOBAL", "GLOBAL A/a", "A/a", 0, '-', "-A-"), -999);
   yUNIT_minval  ("... check error lines"              , yerr_ulines          ()                                                                              ,    1);
   yUNIT_minstr  ("... which error"                    , yerr_uwhich (), "/tmp/ylog_errors.txt");
   yUNIT_minval  ("... error count"                    , yerr_ulines (),    1);
   yUNIT_minstr  ("... check error message"            , yerr_upeek   ('['), "scrp_name:6:0: error: verb тGLOBALТ from prefix тGLOBAL A/aТ with label тA/aТ has leading (A) instead of (-), e.g., т-A-Т");
   yUNIT_mindnoc ();

   yerr_uclose   ();
   PROG__unit_end    ();
   yUNIT_minval  ("... check error lines"              , yerr_ulines          ()                                                                              ,    1);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_global  (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_share     =  '-';
   char        x_index     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) parsing GLOBAL in detail");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple global identifier");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   4, "GLOBAL"   , "GLOBAL -A-  generate test data   " , "GLOBAL -A-", "-A-", "-A-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_minchr  ("... check mark"                     , x_share             , 'A');
   yUNIT_minval  ("call get mark"                      , yUNIT_reuse_get (x_share, x_desc, NULL, NULL)         ,    4);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify ignoring other verbs");
   yUNIT_minval  ("call global (exec)"                 , REUSE__parse_global (x_master,   5, "exec"     , "  exec      read a line          " , "exec"      , "xec", "-A-",  0, &x_share),    0);
   yUNIT_minval  ("call global (SCRP)"                 , REUSE__parse_global (x_master,   6, "SCRP"     , "SCRP        test the reading     " , "SCRP"      , "CRP", "-A-",  0, &x_share),    0);
   yUNIT_minval  ("call global (SHARED)"               , REUSE__parse_global (x_master,   4, "SHARED"   , "SHARED -b-  generate test data   " , "SHARED -b-", "-b-", "-a-",  0, &x_share),    0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt an illegal identifier");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   7, "GLOBAL"   , "GLOBAL -2-  generate test data   " , "GLOBAL -2-", "-2-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   8, "GLOBAL"   , "GLOBAL -Ы-  generate test data   " , "GLOBAL -Ы-", "-Ы-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   8, "GLOBAL"   , "GLOBAL ---  generate test data   " , "GLOBAL ---", "---", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,   8, "CONFIG"   , "CONFIG -2-  generate test data   " , "CONFIG -2-", "-2-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,   8, "CONFIG"   , "CONFIG -M-  generate test data   " , "CONFIG -M-", "-M-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,   8, "CONFIG"   , "CONFIG ---  generate test data   " , "CONFIG ---", "---", "-A-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify another success");             
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  10, "GLOBAL"   , "GLOBAL -M-  generate test data   " , "GLOBAL -M-", "-M-", "-A-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL AииииириииииMииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_minchr  ("... check mark"                     , x_share             , 'M');
   yUNIT_minval  ("call get mark"                      , yUNIT_reuse_get (x_share, x_desc, NULL, NULL)         ,   10);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt with bad label formatting");     
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  11, "GLOBAL"   , "GLOBAL  B-  generate test data   " , "GLOBAL  B-", " B-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  12, "GLOBAL"   , "GLOBAL -B   generate test data   " , "GLOBAL -B ", "-B ", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  12, "GLOBAL"   , "GLOBAL (B)  generate test data   " , "GLOBAL (B)", "(B)", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  12, "GLOBAL"   , "GLOBAL [B]  generate test data   " , "GLOBAL [B]", "[B]", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  11, "CONFIG"   , "CONFIG  У-  generate test data   " , "CONFIG  У-", " У-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  12, "CONFIG"   , "CONFIG -У   generate test data   " , "CONFIG -У ", "-У ", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  12, "CONFIG"   , "CONFIG (У)  generate test data   " , "CONFIG (У)", "(У)", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  12, "CONFIG"   , "CONFIG [У]  generate test data   " , "CONFIG -У]", "-У]", "-A-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL AииииириииииMииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify config success");             
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  22, "CONFIG"   , "CONFIG -Ы-  generate test data   " , "CONFIG -Ы-", "-Ы-", "-Ы-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_minchr  ("... check mark"                     , x_share             , 'Ы');
   yUNIT_minval  ("call get mark"                      , yUNIT_reuse_get (x_share, x_desc, NULL, NULL)         ,   22);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to define outside the master");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_name  ,  32, "GLOBAL"   , "GLOBAL -B-  generate test data   " , "GLOBAL -B-", "-B-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_name  ,  33, "CONFIG"   , "CONFIG -Ж-  generate test data   " , "CONFIG -Ж-", "-Ж-", "-Ы-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");

   yUNIT_mincond ("attempt to redefine");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_name  ,  32, "GLOBAL"   , "GLOBAL -M-  generate test data   " , "GLOBAL -M-", "-M-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_name  ,  33, "CONFIG"   , "CONFIG -Ы-  generate test data   " , "CONFIG -Ы-", "-Ы-", "-Ы-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");

   PROG__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_shared  (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_share     =  '-';
   char        x_index     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) parsing SHARED in detail");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple shared identifier");
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  72, "SHARED"   , "SHARED -b-  generate test data   " , "SHARED -b-", "-b-", "-a-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_minchr  ("... check mark"                     , x_share             , 'b');
   yUNIT_minval  ("call get mark"                      , yUNIT_reuse_get (x_share, x_desc, NULL, NULL)         ,   72);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify ignoring other verbs");
   yUNIT_minval  ("call shared (exec)"                 , REUSE__parse_shared (x_name  ,  73, "exec"     , "  exec      read a line          " , "exec"      , "xec", "-a-",  0, &x_share),    0);
   yUNIT_minval  ("call shared (SCRP)"                 , REUSE__parse_shared (x_name  ,  74, "SCRP"     , "SCRP        test the reading     " , "SCRP"      , "CRP", "-a-",  0, &x_share),    0);
   yUNIT_minval  ("call shared (GLOBAL)"               , REUSE__parse_shared (x_name  ,  75, "GLOBAL"   , "GLOBAL -A-  generate test data   " , "GLOBAL -A-", "-A-", "-A-",  0, &x_share),    0);
   yUNIT_minval  ("call shared (CONFIG)"               , REUSE__parse_shared (x_name  ,  76, "CONFIG"   , "CONFIG -Ы-  generate test data   " , "CONFIG -Ы-", "-Ы-", "-Ы-",  0, &x_share),    0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt an illegal identifier");
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  87, "SHARED"   , "SHARED -2-  generate test data   " , "SHARED -2-", "-2-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  88, "SHARED"   , "SHARED -Ы-  generate test data   " , "SHARED -Ы-", "-Ы-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  89, "SHARED"   , "SHARED -B-  generate test data   " , "SHARED -B-", "-B-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  98, "SHARED"   , "SHARED ---  generate test data   " , "SHARED ---", "---", "-A-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify another success");             
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  , 110, "SHARED"   , "SHARED -s-  generate test data   " , "SHARED -s-", "-s-", "-A-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_minchr  ("... check mark"                     , x_share             , 's');
   yUNIT_minval  ("call get mark"                      , yUNIT_reuse_get (x_share, x_desc, NULL, NULL)         ,  110);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt with bad label formatting");     
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_master,  11, "SHARED"   , "SHARED  j-  generate test data   " , "SHARED  j-", " j-", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_master,  12, "SHARED"   , "SHARED -j   generate test data   " , "SHARED -j ", "-j ", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_master,  12, "SHARED"   , "SHARED (j)  generate test data   " , "SHARED (j)", "(j)", "-A-",  0, &x_share), -999);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_master,  12, "SHARED"   , "SHARED [j]  generate test data   " , "SHARED [j]", "[j]", "-A-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to define inside the master");
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_master, 132, "SHARED"   , "SHARED -j-  generate test data   " , "SHARED -j-", "-j-", "-A-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");

   yUNIT_mincond ("attempt to redefine");
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  32, "SHARED"   , "SHARED -s-  generate test data   " , "SHARED -s-", "-s-", "-A-",  0, &x_share), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");

   PROG__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_old    (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_share     =  '-';
   char        x_major     =  '-';
   char        x_minor     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) parsing REUSE old-style labels");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("setup some reusesr");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   4, "GLOBAL"   , "GLOBAL -A-  generate test data   " , "GLOBAL -A-", "-A-", "-A-",  0, &x_share),    1);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  10, "GLOBAL"   , "GLOBAL -M-  generate test data   " , "GLOBAL -M-", "-M-", "-A-",  0, &x_share),    1);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  32, "CONFIG"   , "CONFIG -Ы-  generate test data   " , "CONFIG -Ы-", "-Ы-", "-Ы-",  0, &x_share),    1);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  72, "SHARED"   , "SHARED -b-  generate test data   " , "SHARED -b-", "-b-", "-a-",  0, &x_share),    1);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  , 136, "SHARED"   , "SHARED -s-  generate test data   " , "SHARED -s-", "-s-", "-a-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple reuse of GLOBAL");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -A-", "-A-", &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping bad prefix");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE (A)", "(A)", &x_major, &x_minor),    0);
   yUNIT_minchr  ("... check x_major"                  , x_major , '-');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '-');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping other bad prefixes");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE [A]", "[A]", &x_major, &x_minor),    0);
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE A/a", "A/a", &x_major, &x_minor),    0);

   yUNIT_mincond ("verify simple reuse of SHARED");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -s-", "-s-", &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 's');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt with illegal suffixes");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -A)", "-A)", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -A ", "-A ", &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping illegal shares");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -2-", "-2-", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -/-", "-/-", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE ---", "---", &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple reuse of CONFIG");
   yUNIT_minval  ("call reuse_old"                     , REUSE__parse_reuse_old (x_name  , 200, "REUSE -Ы-", "-Ы-", &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'Ы');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_mindnoc ();

   PROG__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_new    (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_share     =  '-';
   char        x_major     =  '-';
   char        x_minor     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) parsing REUSE new-style labels");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("setup some reusesr");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   4, "GLOBAL"   , "GLOBAL -A-  generate test data   " , "GLOBAL -A-", "-A-", "-A-",  0, &x_share),    1);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  10, "GLOBAL"   , "GLOBAL -M-  generate test data   " , "GLOBAL -M-", "-M-", "-A-",  0, &x_share),    1);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  32, "CONFIG"   , "CONFIG -Ы-  generate test data   " , "CONFIG -Ы-", "-Ы-", "-Ы-",  0, &x_share),    1);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  72, "SHARED"   , "SHARED -b-  generate test data   " , "SHARED -b-", "-b-", "-a-",  0, &x_share),    1);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  , 136, "SHARED"   , "SHARED -s-  generate test data   " , "SHARED -s-", "-s-", "-a-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple reuse of GLOBAL");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE A/a", "A/a", &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , 'a');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping bad prefix");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE -A-", "-A-", &x_major, &x_minor),    0);
   yUNIT_minchr  ("... check x_major"                  , x_major , '-');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '-');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping other bad prefixes");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE [A]", "[A]", &x_major, &x_minor),    0);
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE (A)", "(A)", &x_major, &x_minor),    0);

   yUNIT_mincond ("verify simple reuse of SHARED");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE s/*", "s/*", &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 's');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping illegal shares");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE 2/b", "2/b", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE ?/c", "?/c", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE -/-", "-/-", &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple reuse of CONFIG");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE Ы/c", "Ы/c", &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'Ы');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , 'c');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify skipping illegal minors");
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE Ы/?", "Ы/?", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE Ы/-", "Ы/-", &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse_new"                     , REUSE__parse_reuse_new (x_name  , 200, "REUSE Ы/ ", "Ы/ ", &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   PROG__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_reuse  (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_share     =  '-';
   char        x_major     =  '-';
   char        x_minor     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) parsing REUSE in detail");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("setup some reusesr");
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,   4, "GLOBAL"   , "GLOBAL -A-  one                  " , "GLOBAL -A-", "-A-", "-A-",  0, &x_share),    1);
   yUNIT_minval  ("call global"                        , REUSE__parse_global (x_master,  10, "GLOBAL"   , "GLOBAL -M-  two                  " , "GLOBAL -M-", "-M-", "-A-",  0, &x_share),    1);
   yUNIT_minval  ("call config"                        , REUSE__parse_global (x_master,  32, "CONFIG"   , "CONFIG -Ы-  three                " , "CONFIG -Ы-", "-Ы-", "-Ы-",  0, &x_share),    1);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  ,  72, "SHARED"   , "SHARED -b-  four                 " , "SHARED -b-", "-b-", "-a-",  0, &x_share),    1);
   yUNIT_minval  ("call shared"                        , REUSE__parse_shared (x_name  , 136, "SHARED"   , "SHARED -s-  five                 " , "SHARED -s-", "-s-", "-a-",  0, &x_share),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify old-style REUSE of global");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  -A-  generate test data   " , "REUSE -A-" , "-A-", '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify new-style REUSE of global (same)");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  A/*  generate test data   " , "REUSE A/-" , "A/*", '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify new-style REUSE of global with minor");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  A/d  generate test data   " , "REUSE A/d" , "A/d", '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , 'd');
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify ignoring other verbs");
   yUNIT_minval  ("call reuse (exec)"                  , REUSE__parse_reuse  (x_name  ,   4, "exec"     , "  exec      read a line          " , "exec"      , "xec", '-', x_desc, &x_major, &x_minor),    0);
   yUNIT_minval  ("call reuse (SCRP)"                  , REUSE__parse_reuse  (x_name  ,   4, "SCRP"     , "SCRP        testing the reading  " , "SCRP"      , "CRP", '-', x_desc, &x_major, &x_minor),    0);
   yUNIT_minval  ("call reuse (GLOBAL)"                , REUSE__parse_reuse  (x_name  ,   4, "GLOBAL"   , "GLOBAL -A-  generate test data   " , "GLOBAL -A-", "-A-", '-', x_desc, &x_major, &x_minor),    0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рbиииирииииириииииsииииири   GL AииииириииииMииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt with unset identifiers");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  -K-  generate test data   " , "REUSE -K-" , "-K-", '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  -q-  generate test data   " , "REUSE -q-" , "-q-", '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt REUSE inside master");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_master,   4, "REUSE"    , "REUSE  -A-  generate test data   " , "REUSE -A-" , "-A-", '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_master,   4, "REUSE"    , "REUSE  -b-  generate test data   " , "REUSE -b-" , "-b-", '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_master,   4, "REUSE"    , "REUSE  -Ы-  generate test data   " , "REUSE -Ы-" , "-Ы-", '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt REUSE inside itself");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  -A-  generate test data   " , "REUSE -A-" , "-A-", 'A', x_desc, &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt REUSE with no identifier");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE       generate test data   " , "REUSE"     , ""   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify another new-style REUSE");
   yUNIT_minval  ("call reuse"                         , REUSE__parse_reuse  (x_name  ,   4, "REUSE"    , "REUSE  Ы/b  generate test data   " , "REUSE Ы/b" , "Ы/b", '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'Ы');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , 'b');
   yUNIT_mindnoc ();

   PROG__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_parse  (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_name      [LEN_TITLE] = "apate.unit";
   char        x_desc      [LEN_LONG]  = "";
   char        x_major     =  '-';
   char        x_minor     =  '-';
   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) parsing GLOBAL reuses");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adding a global");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL -A-  one example          "   , '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '-');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to add with bad identifier");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL -a-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL -Ы-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL -5-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL -/-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL -?-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL A/b  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "GLOBAL"   ,  0, "GLOBAL      one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to add in wrong file");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "GLOBAL"   ,  0, "GLOBAL -B-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify ignoring other verbs");
   yUNIT_minval  ("check reuses"                       , REUSE_parse (x_master,   0, "exec"     ,  0, "  exec      read a line          "   , '-', x_desc, &x_major, &x_minor),    0);
   yUNIT_minval  ("check reuses"                       , REUSE_parse (x_master,   0, "SCRP"     ,  0, "SCRP        test the reading     "   , '-', x_desc, &x_major, &x_minor),    0);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify reusing a global");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE -A-   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minstr  ("... check desc"                     , x_desc  , "[ one example ]- - - - - - - - - - - - - - - - - - - - - - - - - - - ");
   yUNIT_minchr  ("... check x_major"                  , x_major , 'A');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '*');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to reuse non-existant");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE -D-   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minchr  ("... check x_major"                  , x_major , '-');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '-');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to reuse with bad identifier");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE ---   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE -2-   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE -/-   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE ?/-   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE       - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to reuse in wrong file");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "REUSE"    ,  0, "REUSE -A-   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adding a config");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG -Ы-  special system call  "   , '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'Ы');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '-');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to add config with bad identifier");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG -B-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG -d-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG -7-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG -/-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG ---  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG Ы/b  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, "CONFIG      one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to add config in wrong file");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "CONFIG"   ,  0, "CONFIG -Ж-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify reusing a config");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE Ы/b   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minstr  ("... check desc"                     , x_desc  , "[ special system call ]- - - - - - - - - - - - - - - - - - - - - - - ");
   yUNIT_minchr  ("... check x_major"                  , x_major , 'Ы');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , 'b');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify defenses against NULLs");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, NULL       ,  0, "CONFIG -Ж-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "CONFIG"   ,  0, NULL                                      , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH рииииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adding a shared");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "SHARED"   ,  0, "SHARED -c-  better placement     "   , '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minchr  ("... check x_major"                  , x_major , 'c');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , '-');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH риcииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to add shared with bad identifier");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED -B-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED -в-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED -7-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED -/-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED ---  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED a/c  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED      one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH риcииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to add config in wrong file");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_master,   4, "SHARED"   ,  0, "SHARED -f-  one example          "   , '-', x_desc, &x_major, &x_minor), -999);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH риcииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify reusing a config");
   yUNIT_minval  ("call parse"                         , REUSE_parse (x_name  ,   4, "REUSE"    ,  0, "REUSE c/k   - - - - - - - - - -  "   , '-', x_desc, &x_major, &x_minor),    1);
   yUNIT_minstr  ("... check desc"                     , x_desc  , "[ better placement ] - - - - - - - - - - - - - - - - - - - - - - - - ");
   yUNIT_minchr  ("... check x_major"                  , x_major , 'c');
   yUNIT_minchr  ("... check x_minor"                  , x_minor , 'k');
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "+   риии   SH риcииирииииирииииирииииири   GL Aииииирииииирииииирииииири   CO рииииириииЫирииииириииии   р   ¤");
   yUNIT_mindnoc ();

   PROG__unit_end    ();
   chdir   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
koios_reuse_exim   (char a_scrp, char a_list, char a_unit)
{
   char        x_cwd       [LEN_FULL]  = "";
   char        x_name      [LEN_TITLE] = "script.unit";
   char        x_master    [LEN_TITLE] = "master.unit";
   char        x_globals   [LEN_TITLE] = "/tmp/master.globals";
   char        x_desc      [LEN_LONG]  = "";
   int         x_conds     =    0;
   int         x_steps     =    0;
   char        x_share     =  '-';

   yUNIT_minscrpy ("koios", "koios_reuse", "(REUSE) importing and exporting reuse data");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   getcwd  (x_cwd, LEN_FULL);
   chdir   ("/tmp/");
   PROG__unit_quiet  ();

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('A')  , "A    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('D')  , "D    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('J')  , "J    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ж')  , "Ж    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ы')  , "Ы    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adding load of global/config");
   yUNIT_minval  ("... parse"                          , yUNIT_reuse_parse  ('g',    "A    22  verify openning and closing                                           1     0     0     1     6     4     2  и2ииииииии     0  и                        0  и                        0    14    10     1     3     0     8     6     2     0   "),    1);
   yUNIT_minval  ("... parse"                          , yUNIT_reuse_parse  ('g',    "D   105  verify system startup                                                 1     0     0     1     4     2     0  ииииииииии     1  b                        1  D                        0    21    14     5     2     0     0     0     0     0   "),    1);
   yUNIT_minval  ("... parse"                          , yUNIT_reuse_parse  ('g',    "J   182  verify normal processing                                              1     0     0     1     8     2     3  и21иииииии     1  a                        2  ЫD                       0     8     8     0     0     0    12    12     0     0   "),    1);
   yUNIT_minval  ("... parse"                          , yUNIT_reuse_parse  ('g',    "Ж   123  globally shared steps                                                 1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     9     5     1     3     8     0     0     0     0   "),    1);
   yUNIT_minval  ("... parse"                          , yUNIT_reuse_parse  ('g',    "Ы    38  global interal steps                                                  1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     3     2     0     1     3     0     0     0     0   "),    1);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used   ()     , "+   риии   SH рииииирииииирииииирииииири   GL AииDиирииJиирииииирииииири   CO риЖииириииЫирииииириииии   р   ¤");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('A')  , "A    22  verify openning and closing                                           1     0     0     1     6     4     2  и2ииииииии     0  и                        0  и                        0    14    10     1     3     0     8     6     2     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('D')  , "D   105  verify system startup                                                 1     0     0     1     4     2     0  ииииииииии     1  b                        1  D                        0    21    14     5     2     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('J')  , "J   182  verify normal processing                                              1     0     0     1     8     2     3  и21иииииии     1  a                        2  ЫD                       0     8     8     0     0     0    12    12     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ж')  , "Ж   123  globally shared steps                                                 1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     9     5     1     3     8     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ы')  , "Ы    38  global interal steps                                                  1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     3     2     0     1     3     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exporting");
   yUNIT_minval  ("call export"                        , REUSE_export (x_globals)                                       , 5);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify output");
   yUNIT_minval  ("... check count"                    , yenv_ulines(x_globals)     ,    5);
   yUNIT_minstr  ("... check values"                   , yenv_upeek (x_globals, '['), "A    22  verify openning and closing                                           1     0     0     1     6     4     2  и2ииииииии     0  и                        0  и                        0    14    10     1     3     0     8     6     2     0   ");
   yUNIT_minstr  ("... check values"                   , yenv_upeek (x_globals, '>'), "D   105  verify system startup                                                 1     0     0     1     4     2     0  ииииииииии     1  b                        1  D                        0    21    14     5     2     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yenv_upeek (x_globals, '>'), "J   182  verify normal processing                                              1     0     0     1     8     2     3  и21иииииии     1  a                        2  ЫD                       0     8     8     0     0     0    12    12     0     0   ");
   yUNIT_minstr  ("... check values"                   , yenv_upeek (x_globals, '>'), "Ж   123  globally shared steps                                                 1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     9     5     1     3     8     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yenv_upeek (x_globals, '>'), "Ы    38  global interal steps                                                  1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     3     2     0     1     3     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yenv_upeek (x_globals, '>'), "(n/a)");

   yUNIT_mincond ("set to defaults");
   yUNIT_minval  ("... run clear"                      , REUSE_init ()       , 0);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used  ()      , "г   риии   SH рииииирииииирииииирииииири   GL рииииирииииирииииирииииири   CO рииииирииииирииииириииии   р   ¤");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('A')  , "A    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('D')  , "D    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('J')  , "J    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ж')  , "Ж    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ы')  , "Ы    -1  и                                                                     0     0     0     0     0     0     0  ииииииииии     0  и                        0  и                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify importing");
   yUNIT_minval  ("call import"                        , REUSE_import (x_globals)                                       , 5);
   yUNIT_minstr  ("... review marks"                   , yUNIT_reuse_used   ()     , "+   риии   SH рииииирииииирииииирииииири   GL AииDиирииJиирииииирииииири   CO риЖииириииЫирииииириииии   р   ¤");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('A')  , "A    22  verify openning and closing                                           1     0     0     1     6     4     2  и2ииииииии     0  и                        0  и                        0    14    10     1     3     0     8     6     2     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('D')  , "D   105  verify system startup                                                 1     0     0     1     4     2     0  ииииииииии     1  b                        1  D                        0    21    14     5     2     0     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('J')  , "J   182  verify normal processing                                              1     0     0     1     8     2     3  и21иииииии     1  a                        2  ЫD                       0     8     8     0     0     0    12    12     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ж')  , "Ж   123  globally shared steps                                                 1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     9     5     1     3     8     0     0     0     0   ");
   yUNIT_minstr  ("... check values"                   , yUNIT_reuse_show   ('Ы')  , "Ы    38  global interal steps                                                  1     1     0     0     2     2     0  ииииииииии     0  и                        0  и                        2     3     2     0     1     3     0     0     0     0   ");
   yUNIT_mindnoc ();

   PROG__unit_end    ();
   (x_cwd);
   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(startup)------------------------*/
   yUNIT_minunit ("koios_reuse");
   /*---(scripts)------------------------*/
   /*> koios_reuse_index    (++n, x_list, x_unit);                                    <*/
   /*> koios_reuse_set      (++n, x_list, x_unit);                                    <*/
   /*> koios_reuse_update   (++n, x_list, x_unit);                                    <*/
   koios_reuse_delimit  (++n, x_list, x_unit);
   koios_reuse_global   (++n, x_list, x_unit);
   koios_reuse_shared   (++n, x_list, x_unit);
   koios_reuse_old      (++n, x_list, x_unit);
   koios_reuse_new      (++n, x_list, x_unit);
   koios_reuse_reuse    (++n, x_list, x_unit);
   koios_reuse_parse    (++n, x_list, x_unit);
   koios_reuse_exim     (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

