.TH koios 5 2016-May "linux" "structure of config, files, and streams"

.SH NAME
koios \- c language unit testing meta-language and parser

.SH PATRON (roughly pronounced key-oh-s)
.B koios-polos
(axis of heaven), titan of intelligence and farsight

.SH IMAGERY
northern star around which all the other consellations revolve

.SH SUMMARY
koios is a meta-language and related parser to simplify, standardize, and
make executable unit tests for the c language.  it is integrated with yUNIT,
yVAR, and ouroborus (on a system-wide basis).

.SH CAVEAT
nobody will ever use my programs ;) they use my shared libraries (zero public),
keyboard centric usage, one true language (c) focus, and experimental/crazy
designs.  dedicated dog-fooder, no time to coddle.

.SH DOCUMENTATION FILES
.nf  
koios (1)          command-line initiation, use, and options
.B koios (5)··········structure of config, files, and streams
koios (7)          decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) example         simple example of file contents
b) overview        general overview of unit test source
c) files           preview of files used and produced
d) units           guidelines for unit files
e) scripts         usage and layout of script-level verbs
f) conditions      usage and layout of condition-level verbs
g) steps           usage and layout of step-level verbs
h) specialty       usage and layout of specialty step verbs
i) ouroborus       linkage to the ouroborus sequencing system

.SH A) EXAMPLE
the following is a simplisic, but workable unit testing example.
the indentation of the first (or any) field is not required, but helps with
human comprehension and maintenance.  also, spacing and lining up fields is
also unnecessary, but clarifying ;)

below, the 
.B §
symbol is a placeholder for the ascii-standard 0x1F column separator.
0x1F must be used in a real file.

also, the
.B ´´´>
symbol means that more file contents exist to the right, but
are not shown in this example extract.

.B begin åexample.unitæ ---------------------------------

SCRP     § verify creation and destruction of object

  COND   § check initial state
    get  § check object count     § OBJ_count     §      ´´´>

  COND   § create first object    
    exec § call creation          § OBJ_create    §  32  ´´´>
    get  § check object count     § OBJ_count     §      ´´´>

  COND   § create second object   
    exec § call creation          § OBJ_create    §  60  ´´´>
    get  § check object count     § OBJ_count     §      ´´´>

  COND   § delete first object    
    exec § call destruction       § OBJ_delete    §  32  ´´´>
    get  § check object count     § OBJ_count     §      ´´´>

  COND   § purge all object       
    exec § call purge             § OBJ_purge     §      ´´´>
    get  § check object count     § OBJ_count     §      ´´´>

.B end åexample.unitæ -----------------------------------

.SH B) OVERVIEW
unit testing source files are kept in pure,
.B 8-bit ascii
text and a standard
.B column-delimited (0x1F)
format for very easy human digestion and maintenance using a programmer's
favorite editor.

for the sake of my environment and my standard make framework, each unit test
source file uses the
.B .unit
extension and begins with the common program prefix used by the related c
source files.

generally, but not necessarily, there is one unit test description file for
each source code file in the program.  some source may not require testing
(LOL) or may be broken into multiple testing files for easier maintenance.
additional files may be used for complex, integrated testing.

each line is complete in-and-of-itself, but they are executed sequentially
as they appear in the file.  preceding lines often establish conditions or
context for those that follow, but they are not explicitly linked.

vertically, unit tests have a
.B 4-level heirarchy
   1) unit         the entire file
   2) script       begin at
.B SCRP
and end before next
.B SCRP
   3) condition    begin at 
.B COND
and end before next
.B COND
   4) step         almost any other kind of line (almost)

horizontally, unit test lines roughly use a
.B 6-column layout
   1) verb         koios action requested          ( 12 char)
   2) description  human useful, shown on output   ( 35 char)
   3) function     actual c source function name   ( 26 char)
   4) arguments    arguments for that c function   (100 char)
   5) test         explained later and in yVAR     ( 10 char)
   6) expected     expected results of step        (100 char)

while not all lines follow this exact layout, columns are blocked out and spaced
to provide easy readability.  after intense editing, koios is fully capable
of re-formatting to keep a programmer from having to align everything manually.

because columns are delimited, they may be shorter or longer than the maximums
shown above.  they are also trimmed of leading and trailing spaces when read.

there are also two optional fields for step-level lines that allow the program
to explicitly capture a function return value.  while this is not common for
me, it can be extremely useful.
   7) type         return value type               (  1 char)
   8) variable     local variable to accept value  ( 20 char)

.SH C) FILES
other than compilier artifacts, there are only four useful unit testing
files to consider.  there are no configuration files.

.B input files (human maintained) ----------------------------

.B åBASENAMEæ.unit
, the 8-bit, human-readable ascii text file that contains the unit testing
scripts.  this is editable in any editor and can be reformatted with
.B koios --convert åBASENAMEæ

.B master.unit
, an 8-bit, human-readable ascii text file with global code and execution
order descriptions useful to ouroborus, the unit test sequencer.  this is
not always necessary or useful.

.B outputs (do not edit) -------------------------------------

.B åBASENAMEæ_unit.c
, produced by
.B koios --update åBASENAMEæ
containing the c source code to be linked and compilied into the final unit
test.  this is temporarily useful for debugging and can normally be deleted.

.B åBASENAMEæ_unit
, also produced by
.B koios --update åBASENAMEæ
and is the executable unit test which is linked to yUNIT and yVAR to display
standard unit testing results.

.SH D) UNITS
as described above, units are the contents of an entire
.B .unit
file.  during development, unit tests are typically executed script-by-script.
but, during production and updates, full units are often run.

it is critical to get the
.B .unit
files (including master.unit, as needed) added to the version control system
as they are the equivelent of source code.

.B blank lines
have no meaning, but help with human comprehension.  these lines
are standardized during re-formatting and conversion.

.B #>
prefixed lines are kept as
.B comments
but moved to the top-of-file during re-formatting and conversion.

.SS D0. there are three overall unit-specific verbs...
.nf
1. PREP       before any scripts, allows header inclusion
2. incl       directly after PREP, includes one header each
3. global     see "global" in SPECIALTY section

.SS D1. PREP   § include the program headers    § 

this verb must be used to introduce "incl" and "global" verbs, otherwise
it is unnecessary.  it only uses a description.  this generates no output.

.SS D2. incl   § include private header         § example_priv.h      §

no headers are automatically included, same as in c source files.  this is
the koios equivalent of
.B #include ¶example.h¶.
this generates no output.

.SS D3. global § global output variable         § - - -  § int c = 0; §

this is exactly like the "code" verb below, but specificially creates a
unit shared or global variable.  this generates no output.

.SS D4. output displayed (TINU colored green, yellow, or red)

   yUNIT - heatherly unit testing framework --------------------(beg)
   ·
   ·     scripts, conditions, and steps ·····
   ·
   TINU  scrp= 5 cond=12 test=43 [[ pass=43 fail=0  badd=0 void=0  ]]
   yUNIT - heatherly unit testing framework --------------------(end)

.SH E) SCRIPTS
scripts are just a grouping of conditions and execution lines into a manageable
and related set.  they are mostly a complexity management tool.  all conditions
and steps MUST be inside a script.

BUT, when using ouroborus, scripts can be sequenced in complex ways to ensure
the correct testing order in large programs.  see OUROBOROS below.

.SS E0. there are four script-specific verbs...
.nf
1. SCRP       starts the beginning of a new script (REQUIRED)
2. SCRP [è1]  same as SCRP, but has ouroboros sequencing
3. SECT       allows scripts to be visually grouped in the output
4. SHARED     unit-test, shared code that can be used in scripts
5. GLOBAL     program-wide, shared code that can be used anywhere

.SS E1. SCRP       § verify cronpulse operations  § func1, func2, ... §

the SCRP verb begins a new script, which is automatically numbered from 01
to 99 (within a the specific unit test).  every line after SCRP is
within this script until the next SCRP line or end-of-file.

SCRP has two other fields, description and a list of the primary functions
tested.  neither of the other two fields effects testing actions and they
are not checked in any way.  they are just repeated on the testing output.

.B sample output (PRCS colored green, yellow, or red)...

   ===[[ NEW SCRIPT ]]===============================================
   SCRP [01] verify cronpulse operations ===================== [0019]
      focus : func1, func2, ...
      ·
      ·     conditions and steps ·····
      ·
      PRCS       cond=12 test=43 [[ pass=43 fail=0  badd=0 void=0  ]]

.SS E2. SCRP [è1]  § overall testing description  § func1, func2, ... §

exactly the same effect and output as SCRP, but provides an ouroboros
sequencing string.  see OUROBOROS section.

.SS E3. SECT       § more complex testing         §

the SECT verb visually groups all SCRPs after it until the next SECT or
end-of-file.  this verb also ends the SCRP before so must appear on its own.
sect has zero impact on the actual running or results of the unit test other
than to make them more clear.

SECT only has one field, a title, which explains why the scripts are being
grouped.

.B sample output (uncolored)...

   ===============-------------------------------------==============
   SECT ===------------- more complex testing ---------------=== TCES
   ===============-------------------------------------==============

.SS E4. SHARED -d- § prepare files for use        §

the SHARED verb is similar to a SCRP in that it groups conditions and steps
into a larger unit.  but, SHARED conditions are never executed alone, they
are reused inside multiple scripts later in the file.  at generation time
this code is put into a shared function.

the identifier letter [a-z] surrounded by '-' (hyphens) is the way they are
reused later.  in the example above, this is shared tests 'd'.  shared tests are
only available in the unit they appear and must appear before they are reused.
see REUSE in the CONDITIONS section below.

.B sample output (colored magenta)...

      SHARE (a) ===---------   prepare files for use   -----------===
      ·
      ·     conditions and steps ·····
      ·
      ERAHS (a) ===---------   prepare files for use   -----------===

.SS E5. GLOBAL -D- § globally shared steps        §

same as SHARED, but can only appear in åmaster.unitæ.  after processing,
the code is put in a header called åmaster.hæ which all unit tests can call.
GLOBAL identifiers are upper case [A-Z] to differentiate from SHARED [a-z].

CRITICAL, for GLOBAL code to function, the master.unit file requires the PREP
and incl verbs also.  same as c language.

.B sample output (colored blue)...

      GLOBAL (D) ===---------   globally shared steps   ----------===
      ·
      ·     conditions and steps ·····
      ·
      LABOLG (D) ===---------   globally shared steps   ----------===

.SH F) CONDITIONS
conditions are just a grouping of execution lines into a manageable and related
set.  they are mostly a complexity management tool.  it is rarely a good idea
to have more than 10 steps in any one condition.  all steps MUST appear in a
condition.

.SS F0. there are five condition-specific verbs...
.nf
1. COND       starts the beginning of a new condition (REQUIRED)
2. GROUP      allows conditions to be visually grouped in output
3. COND  (7)  same as COND, but can be reused later
4. DITTO (7)  reuses a COND (7) without duplicating lines
5. REUSE -d-  insert unit-shared code from a SHARED verb

.SS F1. COND      § generate a summary           §

the COND verb begins a new condition, which is automatically numbered within
a script from 001 to 999.  all scripts have a condition 001.  conditions must
identify both the script number and condition number to be unique.  every line
after COND is within the condition up until the next COND, GROUP, SCRP, SECT,
DITTO, or REUSE.

COND only has one other field which is a description for the maintainer and
the output file.

.B sample output (uncolored, except matches shared or global)...

      COND [008] generate a summary  -- -- -- -- -- -- -- -- -[00075]

.SS F2. GROUP     § final round                  §

the GROUP verb groups all CONDs after it until the next GROUP or SCRP.
group has zero impact on the actual running or results of the unit test other
than to make them more clear.

group only has one other field which is a description for the maintainer and
the output file.

.B sample output (uncolored)...

      GROUP ===-----------------   final round   -----------------===

.SS F3. COND  (7) § condition description        §

this is exactly like the COND verb, but has a identifier [0-9] that can be
used later in the same SCRP to duplicate this COND and its steps.  very useful
to prevent source duplication and aid updates.  the (7) above only needs to
be unique within a SCRP, but a second COND (7) in the same script will hide
the first one.

output is exactly the same as COND.

.SS F4. DITTO (7) §

this acts as a recall for the COND (7) above it.  the COND (7) header and all
its steps are duplicated (usually minor) in the code at code generation time.
never seen directly in the output, just replaced by original condition and
its steps.

.SS F5. REUSE -d- §

this recalls shared code from either GLOBAL [A-Z] in a shared master.unit file
or SHARED [a-z] above the current SCRP.  the GLOBAL and SHARED and all their
conditions and steps are called as part of a shared function code generation
time -- no duplication.  never seen on output, will just see the SHARE or
GLOBAL output as shown in SCRIPT section.

in the ouput, SHARED conditions are shown as SOND, rather than COND, and the
SOND word is colored magenta.  as stated in SHARED above, a header and footer
is placed around shared conditions.

similar for GLOBAL conditions.  they are shown as GOND, rather than COND,
and the GOND word is colored blue.  as stated in GLOBAL above, a header and
footer is placed around global conditions.

.SH G) STEPS
steps are the real workhorse of unit testing -- units, scripts, and conditions
are simply grouping tools.  each execution line is complete-in-itself
but usually requires previous steps to prepare and later steps to verify.
all steps MUST appear in a condition.

.SS G0. there are two step-specific verbs (essentially the same)...
.nf
1. exec       runs a function and checks return value
2. get        same as exec, only helps identify grey-box testing

.SS G1. exec   § description  § func § arg1, arg2 § i_equal § 0  §
at its simplist, function <func> is passed <arg1> and <arg2>.  at code
generation time, the function prototype will idenfity typical troubles.

the next two fields tell koios what test to perform on the return value, in
this case <i_equal> which is integer equal to, and the gives the actual
expected result.  in appropriate tests or values cause the same trouble as
bad coding in a c program and are debugged the same way, i.e., comparing an
integer to a string, etc.

refer to yVAR for all the possible tests, but the most common are...
   i_equal        integer equality ==
   i_lesser       integer lesser than <
   i_greater      integer greater than >
   r_equal        real/float equality ==
   r_lesser       real/float lesser than <
   r_greater      real/float greater than >
   s_equal        string equality, plus many cool extras
   s_not          string inequality (strcmp != 0)
   p_null         pointer is grounded/NULL
   p_exists       pointer is not grounded/NULL
   u_round        rounded numbers in a string (greybox)

.B sample output (prefix colored green, yellow, or red)...

      aa) str   : check string ·· ·· ·· ·· ·· ·· ·· ·· ·· ·· ·[00076]
         method : yUNIT_teststring (0)
         test   : s_equal    (rc =  101, test abbr = e)
         expect :  5[hello]
         actual :  5[hello]

.SS G2. get    § description  § func § arg1, arg2 § i_equal § 0  §
the very same as exec, but used to identify greybox testing using data accessors
in the c source code.  my habit is to include a function that returns a char*
answer to many data questions so that i can verify the results of actions in
the code.  i use accessors to interrogate globals, data structures, and file
level variables since i refuse to use direct access that would bind the unit
test to specific representations.

.SH H) SPECIALTY
also at the step level, there are some specialty verbs that can give a unit
test much more flexibility.  all specialty steps MUST appear in a condition.

.SS H0. there are six specialty step verbs...
.nf
1. code       c source code line for direct execution
2. code       c source code for local variable definition
3. global     c source definition of global variable (PREP)
4. echo       allows a specific variable to be checked
5. system     executes a string using system()
6. load       places a string into input, like stdin

.SS H1. code   § description   § - - - § <source code>;    §

this places this code in the unit test exactly as requested and labels it
with the description.  this helps to prepare or force data conditions.

.B sample output (prefix colored brown)

      aa) CODE  : set initial value ·· ·· ·· ·· ·· ·· ·· ·· ··[00027]
         code   : 26[strcpy (x_test, "string");]

.SS H2. code   § description   § - - - § int c = 0;        §

also, this allows local unit testing variables to be defined for use
in the execution statements below.  remember, any variables defined are
local to the script only, not the whole unit and won't be available in
any SHARED code.

.B sample output (prefix colored brown)

      aa) CODE  : working variables ·· ·· ·· ·· ·· ·· ·· ·· ··[00008]
         code   : 10[int f = 0;]

.SS H3. global § description   § - - - § <var definition>;    §

same as code variable above for defining variable, but only placed below
the PREP section of the script.  this variable is available in all scripts
within the unit.  if placed in master.unit, it is available everywhere.
this produces no output.

.SS H4. echo   § description  § - - - § <var> § i_equal § 0  §

the allows the checking of unit test locals or source globals by exchanging
the variable name with <var>.  the tests and expected are exactly like with
the exec verb.  echo appears exactly like exec/get in output.

.SS H5. system § description   § - - - § rm test.txt       §

uses the system() function call to execute the string.  this helps simplify
entry and also performs some addition checking automatically.

.B sample output (prefix colored green or red)

      ae) SYS   : run little  ·· ·· ·· ·· ·· ·· ·· ·· ·· ·· ··[00022]
         system : 10[/bin/false]

.SS H6. load   § description   § stdin § test for input    §

places the string into the input stream for the program to read as if typed.
the third field is either stdin or ncurse as they have slightly different
requirements.

.B sample output (prefix colored brown)

      aa) LOAD  : prep data for read · ·· ·· ·· ·· ·· ·· ·· ··[00013]
         stdin  : 13[one two three]

.SH I) OUROBOROS
the impact of ouroboros on unit testing is huge.

it allows scripts to be explicitly sequenced, rather than sequentially run,
without manual intervention.  many unit tests are inter-related, meaning simple
isolated things are tested first and building up to highly integrated functions
later.  with ouroboros, scripts are given specific sequences so that they can
run in any order without having to rebuild and complicate the actual unit tests.

but, the only sign of ouroboros within a unit test is in the SCRP verb.
simply add a sequencing string after the verb and ouroboros will handle
the rest.  the sequence is two characters surrounded by square brackets [--].

WAVE is the first character.  it must be a greek letter.  waves are the major
sequence, and usually proceeds from è = independent functions that do not
require any shared data, to ÿ = integrated reporting that reflects the final
result, i.e., fully dependent on all other code.

STAGE is the second character.  it must be a digit.  stages are the minor
sequence, and usually only help with small adjustments to keep scripts from
interferring with each other.

the default sequence is [--] which means run last.  if all SCRP verbs lack
sequencing, they will run in default order which is SCRP-by-SCRP within
unit.  and, units are run in alphabetical order.

for all other information about ouroboros, just see man ouroboros.

.SH BUGS and CONCERNS
koios depends on proper formatting of the input meta-language file.  if the
file lacks a double quote or delimiter in the correct place, the resulting
errors when compiling the c source for the unit test can be difficult to
track down.

.SH AUTHOR
rsheatherly  can be reached at jelloshrke at gmail dot com

.SH COLOPHON
this page is part of a documentation package mean to make the use of the
heatherly tools easier and faster
