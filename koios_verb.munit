/*===============================[[ beg-code ]]===============================*/
#include    "koios.h"



char  *s_wave     = "/tmp/master.wave";

char
koios_verb_data           (char a_scrp, char a_list, char a_unit)
{
   /*---(locals)-----------+-----+-----+-*/
   char        x_unit      [LEN_LABEL] = "apate.unit";
   char        x_mast      [LEN_LABEL] = "master.unit";
   char        x_indent    =    0;
   char        x_desc      [LEN_DESC]  = "";
   char        x_spec      =  '·';
   char        x_locn      =  '·';
   char        x_is        =  '·';
   char        x_under     =  '·';
   char        x_count     =    0;
   char        x_total     =    0;
   void       *x_code      = NULL;
   void       *x_conv      = NULL;
   char        x_ditto     =  '·';
   char        x_select    =  '·';
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) return data by verb name (VERB__by_name)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();
   /*---(script)-------------------------*/

   yUNIT_mincond  ("verify quick success");
   yerr_ureset   ();
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("SCRP", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "test script header");
   yUNIT_minchr   ("... check spec"                     , x_spec      , 's');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'n');
   yUNIT_minchr   ("... check is"                       , x_is        , 'S');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__scrp);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__scrp);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_minval   ("verb index"                         , VERB__index    ("SCRP"),    5);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a missing verb");
   yerr_ureset   ();
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("HELP", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select), -999);
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_minval   ("verb index"                         , VERB__index    ("HELP"), -999);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a NULL verb");
   yerr_ureset   ();
   yUNIT_minval   ("verb data"                          , VERB__by_name  (NULL  , &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select), -999);
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_minval   ("verb index"                         , VERB__index    (NULL  ), -999);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt an empty verb");
   yerr_ureset   ();
   yUNIT_minval   ("verb data"                          , VERB__by_name  (""    , &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select), -999);
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_minval   ("verb index"                         , VERB__index    (""    ), -999);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify another success");
   yerr_ureset   ();
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("... check indent"                   , x_indent    ,   3);
   yUNIT_minstr   ("... check description"              , x_desc      , "local/script variable defn");
   yUNIT_minchr   ("... check spec"                     , x_spec      , 'p');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__gvar);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__lvar);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_minval   ("verb index"                         , VERB__index    ("local"),   17);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify defense on NULL return variables");
   yerr_ureset   ();
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", NULL     , x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, NULL  , &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, NULL   , &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, NULL   , &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, NULL , &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, NULL    , &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, NULL    , &x_total, &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, NULL    , &x_conv, &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, NULL   , &x_code, &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, NULL   , &x_ditto, &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, NULL    , &x_select),   17);
   yUNIT_minval   ("verb data"                          , VERB__by_name  ("local", &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, NULL     ),   17);
   yUNIT_mindnoc  ();

   /*---(complete)-----------------------*/
   PROG__unit_end ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_verb_cursor         (char a_scrp, char a_list, char a_unit)
{
   /*---(locals)-----------+-----+-----+-*/
   char        x_unit      [LEN_LABEL] = "apate.unit";
   char        x_mast      [LEN_LABEL] = "master.unit";
   char        x_verb      [LEN_LABEL] = "";
   char        x_indent    =    0;
   char        x_desc      [LEN_DESC]  = "";
   char        x_spec      =  '·';
   char        x_locn      =  '·';
   char        x_is        =  '·';
   char        x_under     =  '·';
   char        x_count     =    0;
   char        x_total     =    0;
   void       *x_code      = NULL;
   void       *x_conv      = NULL;
   char        x_ditto     =  '·';
   char        x_select    =  '·';
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) return data by verb cursor (VERB__by_cursor)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();
   /*---(script)-------------------------*/

   yUNIT_mincond  ("verify quick success");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '[', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    1);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "PREP");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "preparation before testing");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '2');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , 'P');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__prep);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt to get previous");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '<', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify getting next");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '>', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    2);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "incl");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   3);
   yUNIT_minstr   ("... check description"              , x_desc      , "c header inclusion");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '3');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__incl);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__incl);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify getting next");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '>', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    3);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "#>");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "script internal comments");
   yUNIT_minchr   ("... check spec"                     , x_spec      , 'c');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '#');
   yUNIT_minchr   ("... check under"                    , x_under     , '*');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__comment);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify getting next (jumping over spacer");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '>', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "SCRP");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "test script header");
   yUNIT_minchr   ("... check spec"                     , x_spec      , 's');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'n');
   yUNIT_minchr   ("... check is"                       , x_is        , 'S');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__scrp);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__scrp);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify defenses on NULL returns");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', NULL  , &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, NULL  , &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, NULL   , &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, NULL   , &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, NULL    , &x_total, &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, NULL    , &x_conv, &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, NULL   , &x_code, &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, NULL   , &x_ditto, &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, NULL    , &x_select),    5);
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '.', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, NULL     ),    5);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify getting last");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', ']', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   41);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "stage");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   3);
   yUNIT_minstr   ("... check description"              , x_desc      , "testing stage definition");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '2');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'm');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt to get next");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '>', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , '-');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify getting previous");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '<', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   40);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "WAVE");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "testing wave definition");
   yUNIT_minchr   ("... check spec"                     , x_spec      , '2');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'm');
   yUNIT_minchr   ("... check is"                       , x_is        , 'W');
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify getting previous (jumping over spacer)");
   yerr_ureset   ();
   yUNIT_minval   ("verb cursor"                        , VERB__by_cursor ('-', '<', x_verb, &x_indent, x_desc, &x_spec, &x_locn, &x_is, &x_under, &x_count, &x_total, &x_conv, &x_code, &x_ditto, &x_select),   38);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "#========");
   yUNIT_minval   ("... check indent"                   , x_indent    ,   0);
   yUNIT_minstr   ("... check description"              , x_desc      , "ending comment");
   yUNIT_minchr   ("... check spec"                     , x_spec      , 'U');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minchr   ("... check is"                       , x_is        , 'A');
   yUNIT_minchr   ("... check under"                    , x_under     , '*');
   yUNIT_minval   ("... check count"                    , x_count     ,   0);
   yUNIT_minval   ("... check total"                    , x_total     ,   0);
   yUNIT_minptr   ("... check conv"                     , x_conv      , NULL);
   yUNIT_minptr   ("... check code"                     , x_code      , NULL);
   yUNIT_minchr   ("... check ditto"                    , x_ditto     , '-');
   yUNIT_minchr   ("... check select"                   , x_select    , '-');
   yUNIT_mindnoc  ();

   /*---(complete)-----------------------*/
   PROG__unit_end ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_verb_detail         (char a_scrp, char a_list, char a_unit)
{
   /*---(locals)-----------+-----+-----+-*/
   char        n           =    0;
   /*---header)-------------------------*/
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) show detail information string (VERB__detail)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();

   yUNIT_mincond  ("verify quick success by name");
   yerr_ureset   ();
   yUNIT_minstr   ("verb detail"                        , VERB__detail    (-1   , "SCRP"), "05) SCRP    0  test script header              s n S -    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a non-existant name");
   yerr_ureset   ();
   yUNIT_minstr   ("verb detail"                        , VERB__detail    (-1   , "HELP"), "--) ······  ·  ······························  · · · ·  ··· ···  ······ ······  · ·  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a negative index");
   yerr_ureset   ();
   yUNIT_minstr   ("verb detail"                        , VERB__detail    (-1   , NULL  ), "--) ······  ·  ······························  · · · ·  ··· ···  ······ ······  · ·  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify last verb");
   yerr_ureset   ();
   yUNIT_minval   ("... check count"                    , VERB__count     () ,  999);
   n = VERB__by_cursor ('-', ']', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
   yUNIT_minstr   ("verb detail"                        , VERB__detail    ( n   , NULL  ), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a out-of-range index");
   yerr_ureset   ();
   yUNIT_minstr   ("verb detail"                        , VERB__detail    (n + 1, NULL  ), "--) ······  ·  ······························  · · · ·  ··· ···  ······ ······  · ·  Ï");
   yUNIT_mindnoc  ();

   /*---(complete)-----------------------*/
   PROG__unit_end ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_verb_addto          (char a_scrp, char a_list, char a_unit)
{
   /*---(locals)-----------+-----+-----+-*/
   char        x_scrp      =   -1;
   char        x_cond      =   -1;
   char        x_exec      =   -1;
   char        x_local     =   -1;
   char        x_stage     =   -1;
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) handle verb counts (VERB__addto)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();

   yUNIT_mincond  ("verify gathering indexes");
   yerr_ureset   ();
   x_scrp  = VERB__index ("SCRP");
   x_cond  = VERB__index ("COND");
   x_exec  = VERB__index ("exec");
   x_local = VERB__index ("local");
   x_stage = VERB__index ("stage");
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    ·   ·  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify adding an occurance");
   yerr_ureset   ();
   yUNIT_minval   ("addto"                              , VERB__addto     (x_scrp)       ,    1);
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    1   1  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    ·   ·  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify adding to a different verb");
   yerr_ureset   ();
   yUNIT_minval   ("addto"                              , VERB__addto     (x_exec)       ,    1);
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    1   1  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    1   1  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify adding to the same verb");
   yerr_ureset   ();
   yUNIT_minval   ("addto"                              , VERB__addto     (x_exec)       ,    1);
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    1   1  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    2   2  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a reset");
   yerr_ureset   ();
   yUNIT_minval   ("call reset"                         , VERB_script_reset ()           ,    0);
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    ·   1  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    ·   2  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify adding another to same");
   yerr_ureset   ();
   yUNIT_minval   ("addto"                              , VERB__addto     (x_exec)       ,    1);
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    ·   1  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    1   3  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify initializing");
   yerr_ureset   ();
   yUNIT_minval   ("call init"                          , VERB_init       ()             ,    0);
   yUNIT_minstr   ("SCRP detail"                        , VERB__detail    (x_scrp , NULL), "05) SCRP    0  test script header              s n S -    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("COND detail"                        , VERB__detail    (x_cond , NULL), "11) COND    3  test condition                  2 - C S    ·   ·  -conv- -code-  - y  Ï");
   yUNIT_minstr   ("exec detail"                        , VERB__detail    (x_exec , NULL), "19) exec    5  function execution              f - - C    ·   ·  -conv- -code-  y y  Ï");
   yUNIT_minstr   ("local detail"                       , VERB__detail    (x_local, NULL), "17) local   3  local/script variable defn      p - - S    ·   ·  -conv- -code-  - -  Ï");
   yUNIT_minstr   ("stage detail"                       , VERB__detail    (x_stage, NULL), "41) stage   3  testing stage definition        2 m - W    ·   ·  (null) (null)  - -  Ï");
   yUNIT_mindnoc  ();

   /*---(complete)-----------------------*/
   PROG__unit_end ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_verb_under          (char a_scrp, char a_list, char a_unit)
{
   /*---(locals)-----------+-----+-----+-*/
   char        x_unit      [LEN_LABEL] = "apate.unit";
   char        x_mast      [LEN_LABEL] = "master.unit";
   char        x_verb      [LEN_LABEL] = "";
   char        x_index     =  '·';
   char        x_spec      =  '·';
   char        x_locn      =  '·';
   char        x_under     =  '·';
   void       *x_code      = NULL;
   void       *x_conv      = NULL;
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) process verb under status (VERB__parse_under)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();
   yerr_uopen    ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify PREP verb");
   x_under     = '-';
   yUNIT_minval   ("verify PREP at first"               , VERB__parse_under  (x_unit,  1, "PREP"   , 'P', '-', &x_under),    1);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'P';
   yUNIT_minval   ("attempt PREP after PREP"            , VERB__parse_under  (x_unit,  1, "PREP"   , 'P', '-', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("attempt PREP after SCRP-level"      , VERB__parse_under  (x_unit,  1, "PREP"   , 'P', '-', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify hitting SCRP-level verb");
   x_under     = '-';
   yUNIT_minval   ("verify SCRP at first"               , VERB__parse_under  (x_unit,  1, "SCRP"   , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'P';
   yUNIT_minval   ("verify SCRP after PREP"             , VERB__parse_under  (x_unit,  1, "SCRP"   , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'S';
   yUNIT_minval   ("verify SCRP after SHARED"           , VERB__parse_under  (x_unit,  1, "SHARED" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'S';
   yUNIT_minval   ("verify SCRP after SCRP"             , VERB__parse_under  (x_unit,  1, "SCRP"   , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("verify SCRP-level after COND-level" , VERB__parse_under  (x_unit,  1, "SCRP"   , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("verify SCRP-level after COND-level" , VERB__parse_under  (x_unit,  1, "SHARED" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("verify SCRP-level after COND-level" , VERB__parse_under  (x_unit,  1, "GLOBAL" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("verify SCRP-level after COND-level" , VERB__parse_under  (x_unit,  1, "CONFIG" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = '-';
   yUNIT_minval   ("verify SCRP-level after STEP-level" , VERB__parse_under  (x_unit,  1, "SCRP"   , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = '-';
   yUNIT_minval   ("verify SCRP-level after STEP-level" , VERB__parse_under  (x_unit,  1, "SHARED" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = '-';
   yUNIT_minval   ("verify SCRP-level after STEP-level" , VERB__parse_under  (x_unit,  1, "GLOBAL" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = '-';
   yUNIT_minval   ("verify SCRP-level after STEP-level" , VERB__parse_under  (x_unit,  1, "CONFIG" , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = '#';
   yUNIT_minval   ("verify SCRP after comment"          , VERB__parse_under  (x_unit,  1, "SCRP"   , 'S', '-', &x_under),    2);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify COND-level verb");
   x_under     = '-';
   yUNIT_minval   ("attempt COND at first"              , VERB__parse_under  (x_unit,  1, "COND"   , 'C', 'S', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   x_under     = 'P';
   yUNIT_minval   ("attempt COND after PREP"            , VERB__parse_under  (x_unit,  1, "COND"   , 'C', 'S', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("verify COND after SCRP-level"       , VERB__parse_under  (x_unit,  1, "COND"   , 'C', 'S', &x_under),    1);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'C';
   yUNIT_minval   ("verify COND after COND"             , VERB__parse_under  (x_unit,  1, "COND"   , 'C', 'S', &x_under),    3);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'C';
   yUNIT_minval   ("verify GROUP after COND"            , VERB__parse_under  (x_unit,  1, "GROUP"  , 'C', 'S', &x_under),    3);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'C';
   yUNIT_minval   ("verify COND after GROUP"            , VERB__parse_under  (x_unit,  1, "COND"   , 'C', 'S', &x_under),    3);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'C';
   yUNIT_minval   ("verify DITTO after COND"            , VERB__parse_under  (x_unit,  1, "DITTO"  , 'C', 'S', &x_under),    3);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'C';
   yUNIT_minval   ("verify REUSE after COND"            , VERB__parse_under  (x_unit,  1, "REUSE"  , 'C', 'S', &x_under),    3);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'C';
   yUNIT_minval   ("verify COND after EXEC-level"       , VERB__parse_under  (x_unit,  1, "COND"   , 'C', 'S', &x_under),    3);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify WAVE-level verb");
   x_under     = '-';
   yUNIT_minval   ("verify WAVE at first"               , VERB__parse_under  (x_unit,  1, "WAVE"   , 'W', '-', &x_under),    5);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   x_under     = 'P';
   yUNIT_minval   ("verify WAVE after PREP"             , VERB__parse_under  (x_unit,  1, "WAVE"   , 'W', '-', &x_under),    5);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   x_under     = 'S';
   yUNIT_minval   ("verify WAVE after SCRP-level"       , VERB__parse_under  (x_unit,  1, "WAVE"   , 'W', '-', &x_under),    5);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   x_under     = 'C';
   yUNIT_minval   ("verify WAVE after COND-level"       , VERB__parse_under  (x_unit,  1, "WAVE"   , 'W', '-', &x_under),    5);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   x_under     = 'C';
   yUNIT_minval   ("verify WAVE after STEP-level"       , VERB__parse_under  (x_unit,  1, "WAVE"   , 'W', '-', &x_under),    5);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify STAGE only in WAVE");
   x_under     = '-';
   yUNIT_minval   ("attempt STAGE at first"             , VERB__parse_under  (x_unit,  1, "stage"  , '-', 'W', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   x_under     = 'P';
   yUNIT_minval   ("attempt STAGE in PREP"              , VERB__parse_under  (x_unit,  1, "stage"  , '-', 'W', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("attempt STAGE in SCRP-level"        , VERB__parse_under  (x_unit,  1, "stage"  , '-', 'W', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("attempt STAGE in COND-level"        , VERB__parse_under  (x_unit,  1, "stage"  , '-', 'W', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'W';
   yUNIT_minval   ("verify STAGE in WAVE"               , VERB__parse_under  (x_unit,  1, "stage"  , '-', 'W', &x_under),    4);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify GLOBAL only in PREP");
   x_under     = '-';
   yUNIT_minval   ("attempt GLOBAL at first"            , VERB__parse_under  (x_unit,  1, "global" , '-', 'P', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   x_under     = 'P';
   yUNIT_minval   ("verify GLOBAL in PREP"              , VERB__parse_under  (x_unit,  1, "global" , '-', 'P', &x_under),    4);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("attempt GLOBAL in SCRP-level"       , VERB__parse_under  (x_unit,  1, "global" , '-', 'P', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("attempt GLOBAL in COND-level"       , VERB__parse_under  (x_unit,  1, "global" , '-', 'P', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'W';
   yUNIT_minval   ("attempt GLOBAL in WAVE"             , VERB__parse_under  (x_unit,  1, "global" , '-', 'P', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify LOCAL only in SCRP-level");
   x_under     = '-';
   yUNIT_minval   ("attempt LOCAL at first"             , VERB__parse_under  (x_unit,  1, "local"  , '-', 'S', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   x_under     = 'P';
   yUNIT_minval   ("attempt LOCAL in PREP"              , VERB__parse_under  (x_unit,  1, "local"  , '-', 'S', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("verify LOCAL in SCRP-level"         , VERB__parse_under  (x_unit,  1, "local"  , '-', 'S', &x_under),    4);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("attempt LOCAL in COND-level"        , VERB__parse_under  (x_unit,  1, "local"  , '-', 'S', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'W';
   yUNIT_minval   ("attempt LOCAL in WAVE"              , VERB__parse_under  (x_unit,  1, "local"  , '-', 'S', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify EXEC only in COND-level");
   x_under     = '-';
   yUNIT_minval   ("attempt EXEC at first"              , VERB__parse_under  (x_unit,  1, "exec"   , '-', 'C', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   x_under     = 'P';
   yUNIT_minval   ("attempt EXEC in PREP"               , VERB__parse_under  (x_unit,  1, "exec"   , '-', 'C', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("verify EXEC in SCRP-level"          , VERB__parse_under  (x_unit,  1, "exec"   , '-', 'C', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("attempt EXEC in COND-level"         , VERB__parse_under  (x_unit,  1, "exec"   , '-', 'C', &x_under),    4);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'W';
   yUNIT_minval   ("attempt EXEC in WAVE"               , VERB__parse_under  (x_unit,  1, "exec"   , '-', 'C', &x_under), -999);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_mindnoc  ();

   yerr_ureset   ();
   yUNIT_mincond  ("verify comment anywhere");
   x_under     = '-';
   yUNIT_minval   ("verify comment overall"             , VERB__parse_under  (x_unit,  1, "#>"     , '#', '*', &x_under),    7);
   yUNIT_minchr   ("... check under"                    , x_under     , '-');
   x_under     = 'P';
   yUNIT_minval   ("verify comment in PREP"             , VERB__parse_under  (x_unit,  1, "#>"     , '#', '*', &x_under),    7);
   yUNIT_minchr   ("... check under"                    , x_under     , 'P');
   x_under     = 'S';
   yUNIT_minval   ("verify comment in SCRP"             , VERB__parse_under  (x_unit,  1, "#>"     , '#', '*', &x_under),    7);
   yUNIT_minchr   ("... check under"                    , x_under     , 'S');
   x_under     = 'C';
   yUNIT_minval   ("verify comment in SCRP"             , VERB__parse_under  (x_unit,  1, "#>"     , '#', '*', &x_under),    7);
   yUNIT_minchr   ("... check under"                    , x_under     , 'C');
   x_under     = 'W';
   yUNIT_minval   ("verify comment in WAVE"             , VERB__parse_under  (x_unit,  1, "#>"     , '#', '*', &x_under),    7);
   yUNIT_minchr   ("... check under"                    , x_under     , 'W');
   yUNIT_mindnoc  ();

   /*---(complete)-----------------------*/
   PROG__unit_end ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_verb_parse          (char a_scrp, char a_list, char a_unit)
{
   /*---(locals)-----------+-----+-----+-*/
   char        x_unit      [LEN_LABEL] = "apate.unit";
   char        x_mast      [LEN_LABEL] = "master.unit";
   char        x_verb      [LEN_LABEL] = "";
   char        x_index     =  '·';
   char        x_spec      =  '·';
   char        x_locn      =  '·';
   char        x_under     =  '·';
   void       *x_code      = NULL;
   void       *x_conv      = NULL;
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) parse verb information (VERB_parse)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();
   yerr_uopen    ();

   yUNIT_mincond  ("verify quick success");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit,  1, "SCRP        ", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1   );
   yUNIT_minstr   ("... check verb"                     , x_verb      , "SCRP");
   yUNIT_minval   ("... check index"                    , x_index     , 5);
   yUNIT_minchr   ("... check spec"                     , x_spec      , 's');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'n');
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__scrp);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__scrp);
   yUNIT_minstr   ("... which error"                    , yerr_uwhich (), "/tmp/ylog_errors.txt");
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt a missing verb");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit, 25, "handler     ", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check index"                    , x_index     , -1);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , 0);
   yUNIT_minptr   ("... check code"                     , x_code      , 0);
   yUNIT_minstr   ("... which error"                    , yerr_uwhich (), "/tmp/ylog_errors.txt");
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    1);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "apate.unit:25:0: error: verb åhandleræ not recognized/found");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify SCRP with stage data");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit,  1, "SCRP    [1a]", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1   );
   yUNIT_minstr   ("... check verb"                     , x_verb      , "SCRP");
   yUNIT_minval   ("... check index"                    , x_index     , 5);
   yUNIT_minchr   ("... check spec"                     , x_spec      , 's');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'n');
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__scrp);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__scrp);
   yUNIT_minstr   ("... which error"                    , yerr_uwhich (), "/tmp/ylog_errors.txt");
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with null unit");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (NULL  ,  1, "SCRP        ", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check index"                    , x_index     , -1);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , 0);
   yUNIT_minptr   ("... check code"                     , x_code      , 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify parsing a COND verb");
   yerr_ureset   ();
   yUNIT_minval   ("parse COND"                         , VERB_parse (x_unit , 10, " COND"      , &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "COND");
   yUNIT_minval   ("... check index"                    , x_index     , 999);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '2');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv pointer"             , x_conv      , CONV__cond);
   yUNIT_minptr   ("... check code pointer"             , x_code      , CODE__cond);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify parsing a COND again with ditto number");
   yerr_ureset   ();
   yUNIT_minval   ("parse COND"                         , VERB_parse (x_unit , 40, " COND (1)"  , &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "COND");
   yUNIT_minval   ("... check index"                    , x_index     , 999);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '2');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv pointer"             , x_conv      , CONV__cond);
   yUNIT_minptr   ("... check code pointer"             , x_code      , CODE__cond);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");

   yUNIT_mincond  ("attempt with null field");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit,  1, NULL          , &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check index"                    , x_index     , -1);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , 0);
   yUNIT_minptr   ("... check code"                     , x_code      , 0);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify GLOBAL in master");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_mast, 75, "GLOBAL   -A-", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1   );
   yUNIT_minstr   ("... check verb"                     , x_verb      , "GLOBAL");
   yUNIT_minval   ("... check index"                    , x_index     , 7);
   yUNIT_minchr   ("... check spec"                     , x_spec      , 's');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'm');
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__shared);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__shared);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt GLOBAL in normal unit");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit, 75, "GLOBAL   -A-", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check index"                    , x_index     , -1);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , 0);
   yUNIT_minptr   ("... check code"                     , x_code      , 0);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "apate.unit:75:0: error: verb åGLOBALæ good; BUT, not allowed outside master.unit");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify SHARED in normal unit");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit, 95, "SHARED   -a-", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "SHARED");
   yUNIT_minval   ("... check index"                    , x_index     , 999);
   yUNIT_minchr   ("... check spec"                     , x_spec      , 's');
   yUNIT_minchr   ("... check location"                 , x_locn      , 'n');
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__shared);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__shared);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt SHARED in master unit");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_mast, 95, "SHARED   -a-", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), -999);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "");
   yUNIT_minval   ("... check index"                    , x_index     , -1);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '-');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , 0);
   yUNIT_minptr   ("... check code"                     , x_code      , 0);
   yUNIT_minstr   ("... check error message"             , yerr_upeek   ('['), "master.unit:95:0: error: verb åSHAREDæ good; BUT, not allowed inside master.unit");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify parsing a COND verb");
   yerr_ureset   ();
   yUNIT_minval   ("parse COND"                         , VERB_parse (x_unit , 10, " COND"      , &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1);
   yUNIT_minstr   ("... check verb"                     , x_verb      , "COND");
   yUNIT_minval   ("... check index"                    , x_index     , 999);
   yUNIT_minchr   ("... check spec"                     , x_spec      , '2');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv pointer"             , x_conv      , CONV__cond);
   yUNIT_minptr   ("... check code pointer"             , x_code      , CODE__cond);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify step verbs (exec)");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit,  1, "     exec   ", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1   );
   yUNIT_minstr   ("... check verb"                     , x_verb      , "exec");
   yUNIT_minval   ("... check index"                    , x_index     , 19);
   yUNIT_minchr   ("... check spec"                     , x_spec      , 'f');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__exec);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__exec);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify another step verbs (get)");
   yerr_ureset   ();
   yUNIT_minval   ("parse verb"                         , VERB_parse  (x_unit,  1, "     get    ", &x_under, x_verb, &x_index, &x_spec, &x_locn, &x_conv, &x_code), 1   );
   yUNIT_minstr   ("... check verb"                     , x_verb      , "get");
   yUNIT_minval   ("... check index"                    , x_index     , 20);
   yUNIT_minchr   ("... check spec"                     , x_spec      , 'f');
   yUNIT_minchr   ("... check location"                 , x_locn      , '-');
   yUNIT_minptr   ("... check conv"                     , x_conv      , CONV__exec);
   yUNIT_minptr   ("... check code"                     , x_code      , CODE__exec);
   yUNIT_minstr   ("... check error message"            , yerr_upeek   ('['), "(n/a)");
   yUNIT_mindnoc  ();

   /*---(complete)-----------------------*/
   yerr_uclose   ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_verb_ditto          (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("koios", "koios_verb", "(VERB) check dittoable/selectable verification");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   PROG__unit_quiet  ();


   yUNIT_mincond  ("verify non-dittoable and non-selctable verbs");
   yUNIT_minval   ("call ditto for PREP"                 , VERB_dittoable  ("PREP"       ), 0);
   yUNIT_minval   ("call select for PREP"                , VERB_selectable ("PREP"       ), 0);
   yUNIT_minval   ("call ditto for SCRP"                 , VERB_dittoable  ("SCRP"       ), 0);
   yUNIT_minval   ("call select for SCRP"                , VERB_selectable ("SCRP"       ), 0);
   yUNIT_minval   ("call ditto for local"                , VERB_dittoable  ("local"      ), 0);
   yUNIT_minval   ("call select for local"               , VERB_selectable ("local"      ), 0);
   yUNIT_mindnoc  () ;

   yUNIT_mincond  ("verify non-dittoable BUT selctable verbs");
   yUNIT_minval   ("call ditto for COND"                 , VERB_dittoable  ("COND"       ), 0);
   yUNIT_minval   ("call select for COND"                , VERB_selectable ("COND"       ), 1);
   yUNIT_minval   ("call ditto for REUSE"                , VERB_dittoable  ("REUSE"      ), 0);
   yUNIT_minval   ("call select for REUSE"               , VERB_selectable ("REUSE"      ), 1);
   yUNIT_mindnoc  () ;

   yUNIT_mincond  ("verify dittoable and selectable verbs");
   yUNIT_minval   ("call ditto for exec"                 , VERB_dittoable  ("exec"       ), 1);
   yUNIT_minval   ("call select for exec"                , VERB_selectable ("exec"       ), 1);
   yUNIT_minval   ("call ditto for system"               , VERB_dittoable  ("system"     ), 1);
   yUNIT_minval   ("call select for system"              , VERB_selectable ("system"     ), 1);
   yUNIT_minval   ("call ditto for echo"                 , VERB_dittoable  ("echo"       ), 1);
   yUNIT_minval   ("call select for echo"                , VERB_selectable ("echo"       ), 1);
   yUNIT_minval   ("call ditto for file"                 , VERB_dittoable  ("file"       ), 1);
   yUNIT_minval   ("call select for file"                , VERB_selectable ("file"       ), 1);
   yUNIT_mindnoc  () ;

   yUNIT_mincond  ("attempt non-existant verbs");
   yUNIT_minval   ("call ditto for trouble"              , VERB_dittoable  ("trouble"    ), 0);
   yUNIT_minval   ("call select for trouble"             , VERB_selectable ("trouble"    ), 0);
   yUNIT_minval   ("call ditto for hazmat"               , VERB_dittoable  ("hazmat"     ), 0);
   yUNIT_minval   ("call select for hazmat"              , VERB_selectable ("hazmat"     ), 0);
   yUNIT_minval   ("call ditto for comment"              , VERB_dittoable  ("#huh"       ), 0);
   yUNIT_minval   ("call select for comment"             , VERB_selectable ("#huh"       ), 0);
   yUNIT_mindnoc  () ;

   yerr_ureset   ();
   yUNIT_mincond  ("attempt empty and null");
   yUNIT_minval   ("call ditto for null"                 , VERB_dittoable  (NULL         ), 0);
   yUNIT_minval   ("call select for null"                , VERB_selectable (NULL         ), 0);
   yUNIT_minval   ("call ditto for empty"                , VERB_dittoable  (""           ), 0);
   yUNIT_minval   ("call select for empty"               , VERB_selectable (""           ), 0);
   yUNIT_mindnoc  () ;

   PROG__unit_end    ();
   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(startup)------------------------*/
   yUNIT_minunit ("koios_verb");
   /*---(scripts)------------------------*/
   koios_verb_data      (++n, x_list, x_unit);
   koios_verb_cursor    (++n, x_list, x_unit);
   koios_verb_detail    (++n, x_list, x_unit);
   koios_verb_addto     (++n, x_list, x_unit);
   koios_verb_under     (++n, x_list, x_unit);
   koios_verb_parse     (++n, x_list, x_unit);
   koios_verb_ditto     (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

