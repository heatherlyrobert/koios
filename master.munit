#include    "koios.h"



/*===[[ COMMON ]]=============================================================*/

static char   sm_cwd     [LEN_FULL]  = "/tmp";

static char   sm_nmast   [LEN_HUND]  = "/tmp/master.unit";
static char   sm_nmhead  [LEN_HUND]  = "/tmp/master.h";
static char   sm_nglob   [LEN_HUND]  = "/tmp/master.globals";
static char   sm_nscrp   [LEN_HUND]  = "/tmp/apate.unit";
static char   sm_nmain   [LEN_HUND]  = "/tmp/apate_unit.tmp";
static char   sm_ncode   [LEN_HUND]  = "/tmp/apate.c";
static char   sm_nwave   [LEN_HUND]  = "/tmp/apate.wave";
static char   sm_nconv   [LEN_HUND]  = "/tmp/apate_unit.cs";
static char   sm_nold    [LEN_HUND]  = "/tmp/apate.unit.old";
static char   sm_nhead   [LEN_HUND]  = "/tmp/apate.h";
static char   sm_urun    [LEN_HUND]  = "/tmp/apate.urun";
static char   sm_nexec   [LEN_HUND]  = "/tmp/apate_unit";

static FILE  *sm_mast    = NULL;      /* master unit test source        */
static FILE  *sm_scrp    = NULL;      /* script unit test source        */
static FILE  *sm_main    = NULL;      /* main program file              */
static FILE  *sm_code    = NULL;      /* code file                      */
static FILE  *sm_wave    = NULL;      /* wave file                      */
static FILE  *sm_conv    = NULL;      /* converted file                 */
static FILE  *sm_old     = NULL;      /* tmp converted file             */

static int    sm_umark   =    0;      /* unit testing source file mark  */
static int    sm_cmark   =    0;      /* code file mark                 */
static int    sm_mmark   =    0;      /* main program file mark         */
static int    sm_wmark   =    0;      /* wave file mark                 */
static int    sm_vmark   =    0;      /* converted file mark            */

static char   sm_share   =  '-';
static char   sm_select  =  '-';

static char   sm_display [LEN_RECD]  = "";
static char   sm_system  [LEN_RECD]  = "";
static char   sm_load    [LEN_RECD]  = "";

static int    sm_nline   =    0;

static char   sm_called  [LEN_HUND]  = "";


/*===[[ SUPPORT ]]============================================================*/

char
KOIOS__clear_all          (char a_which)
{

   yUNIT_mincond  ("clear out all files");
   if (a_which == 'Õ')  yUNIT_minval   ("clear scrp file"                    , unlink (sm_nscrp),  666);
   yUNIT_minval   ("clear master file"                  , unlink (sm_nmast) ,  666);
   yUNIT_minval   ("clear master file"                  , unlink (sm_nmhead),  666);
   yUNIT_minval   ("clear main file"                    , unlink (sm_nmain) ,  666);
   yUNIT_minval   ("clear code file"                    , unlink (sm_ncode) ,  666);
   yUNIT_minval   ("clear wave file"                    , unlink (sm_nwave) ,  666);
   yUNIT_minval   ("clear conv file"                    , unlink (sm_nconv) ,  666);
   yUNIT_minval   ("clear old file"                     , unlink (sm_nold ) ,  666);
   yUNIT_minval   ("clear globals file"                 , unlink (sm_nglob) ,  666);
   yUNIT_minval   ("clear header"                       , unlink (sm_nhead) ,  666);
   yUNIT_minval   ("clear exec unit test"               , unlink (sm_nexec) ,  666);
   yUNIT_minval   ("reset marks"                        , sm_umark  = sm_cmark  = sm_mmark  = sm_wmark  = sm_vmark  = 0 ,    0);
   yUNIT_minchr   ("reset shares"                       , sm_share  = sm_select = '-'                                   ,  '-');
   yUNIT_mindnoc  ();

   return 0;
}

char
KOIOS_prep_all            (void)
{
   yUNIT_mincond  ("prepare clean start");
   yUNIT_minstr   ("capture home directory"             , getcwd  (sm_cwd, LEN_FULL)      ,  "¬");
   yUNIT_minval   ("move to /tmp"                       , chdir   ("/tmp/")               ,    0);
   yUNIT_mindnoc  ();

   KOIOS__clear_all ('Ô');
   system ("touch /tmp/apate.h");

   yUNIT_minval   ("open logging file"                  , ylog_uopen ()                   ,    1);
   yUNIT_minval   ("open error file"                    , yerr_uopen ()                   ,    2);

   return 0;
}

char
KOIOS_open_all            (char a_type, char a_loud)
{
   if (a_type == '*') {
      yUNIT_mincond  ("prepare clean start");
      yUNIT_minstr   ("capture home directory"             , getcwd  (sm_cwd, LEN_FULL)      ,  "¬");
      yUNIT_minval   ("move to /tmp"                       , chdir   ("/tmp/")               ,    0);
      if (a_loud != 'y')  yUNIT_minval   ("run unit quiet"                     , PROG__unit_quiet  ()            ,    0);
      else                yUNIT_minval   ("run unit loud"                      , PROG__unit_loud   ()            ,    0);
      yUNIT_minval   ("open logging file"                  , ylog_uopen ()                   ,    1);
      yUNIT_minval   ("open error file"                    , yerr_uopen ()                   ,    2);
      if (a_loud != 'y')  yUNIT_minchr   ("turn on debug"                      , my.debug = 'y'                  ,  'y');
      yUNIT_mindnoc  ();
   }

   CODE_init ();
   KOIOS__clear_all ('Ô');

   yUNIT_mincond  ("open all files");
   yUNIT_minval   ("clear statistics"                   , CODE_init ()    ,    0);
   yUNIT_minval   ("open the scrp file"                 , READ_open   (__FILE__, __FUNCTION__, __LINE__, "", sm_nscrp, 'r', &sm_scrp, NULL   ),  666);
   yUNIT_minval   ("open the main file"                 , READ_open   (__FILE__, __FUNCTION__, __LINE__, "", sm_nmain, 'w', &sm_main, NULL   ),    0);
   yUNIT_minval   ("open the code file"                 , READ_open   (__FILE__, __FUNCTION__, __LINE__, "", sm_ncode, 'w', &sm_code, NULL   ),    0);
   yUNIT_minval   ("open the wave file"                 , READ_open   (__FILE__, __FUNCTION__, __LINE__, "", sm_nwave, 'w', &sm_wave, NULL   ),    0);
   yUNIT_minval   ("open the conv file"                 , READ_open   (__FILE__, __FUNCTION__, __LINE__, "", sm_nconv, 'w', &sm_conv, NULL   ),    0);
   system ("touch /tmp/apate.h");
   yUNIT_mindnoc  ();

   return 0;
}

char
KOIOS_close_all           (char a_type)
{
   yUNIT_mincond  ("close all files");
   yUNIT_minval   ("close the scrp file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nscrp, &sm_scrp),  666);
   yUNIT_minval   ("close the main file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_ncode, &sm_code),  666);
   yUNIT_minval   ("close the code file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nmain, &sm_main),  666);
   yUNIT_minval   ("close the wave file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nwave, &sm_wave),  666);
   yUNIT_minval   ("close the conv file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nconv, &sm_conv),  666);
   yUNIT_mindnoc  ();

   KOIOS__clear_all ('Õ');

   if (a_type == '*') {
      yUNIT_mincond  ("prepare clean end");
      yUNIT_minval   ("close error file"                   , yerr_uclose ()   ,    0);
      yUNIT_minval   ("close error file"                   , ylog_uclose ()   ,    0);
      yUNIT_minval   ("run unit end"                       , PROG__unit_end (),    0);
      yUNIT_minval   ("move back to home directory"        , chdir   (sm_cwd) ,    0);
      yUNIT_mindnoc  ();
   }

   return 0;
}

char
KOIOS_reset             (void)
{
   yUNIT_mincond  ("close all files");
   yUNIT_minval   ("close the scrp file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nscrp, &sm_scrp),  666);
   yUNIT_minval   ("close the main file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_ncode, &sm_code),  666);
   yUNIT_minval   ("close the code file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nmain, &sm_main),  666);
   yUNIT_minval   ("close the wave file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nwave, &sm_wave),  666);
   yUNIT_minval   ("close the conv file"                , READ_close  (__FILE__, __FUNCTION__, __LINE__, sm_nconv, &sm_conv),  666);
   yUNIT_mindnoc  ();

   KOIOS__clear_all ('Õ');

   return 0;
}


/*===[[ CODE FILE MAJORS ]]===================================================*/

int 
KOIOS_code_beg          (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to code for beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_ncode   , a_mark)   , "/*================================= beg-code =================================*/");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/* /usr/local/bin/koios                                                       */");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/*   autogen by koios-polos (axis of heaven) unit testing meta-language       */");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/*---(standard support functions)----*/"                                         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "#include    <yURG.h>"                                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "#include    <yUNIT_unit.h>"                                                      );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "#include    \"master.h\""                                                        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/*================================ beg-script ================================*/");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int 
KOIOS_code_end          (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to code for end");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_ncode   , a_mark)   , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/*================================ end-script ================================*/");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_code_stats        (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to code for stats");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_ncode   , a_mark)   , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "char"                                                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "yUNIT_stats     (void)"                                                          );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "{"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   yUNIT_unique (0, 0, 0, 0, 0, 0);"                                             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   return 0;"                                                                    );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "}"                                                                               );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_code_verbs        (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to code for verb inventory");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_ncode   , a_mark)   , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "char"                                                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "yUNIT_verbs (void)"                                                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "{"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"koios, record type summary\\n\");"                                  );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\noverall...\\n\");"                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  PREP       =     0   preparation before testing\\n\");"           );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  incl       =     0   c header inclusion\\n\");"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  #>         =     0   script internal comments\\n\");"             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nscripts...\\n\");"                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  SCRP       =     0   test script header\\n\");"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  SHARED     =     0   shared code between scripts\\n\");"          );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  GLOBAL     =     0   shared code between units\\n\");"            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  CONFIG     =     0   shared code between units\\n\");"            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  SECT       =     0   grouping of scripts\\n\");"                  );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nconditions...\\n\");"                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  COND       =     0   test condition\\n\");"                       );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  DITTO      =     0   repeated test condition\\n\");"              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  REUSE      =     0   inclusion of shared code\\n\");"             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  GROUP      =     0   grouping of conditions\\n\");"               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nvariables...\\n\");"                                             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  global     =     0   global/unit variable defn\\n\");"            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  local      =     0   local/script variable defn\\n\");"           );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nsteps...\\n\");"                                                 );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  exec       =     0   function execution\\n\");"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  get        =     0   unit test accessor retrieval\\n\");"         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  echo       =     0   test a variable directly\\n\");"             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nspecialty...\\n\");"                                             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  code       =     0   insert c code\\n\");"                        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  system     =     0   execute shell code\\n\");"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  load       =     0   place data into input\\n\");"                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  mode       =     0   set pass or forced_fail mode\\n\");"         );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nsupport...\\n\");"                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  file       =     0   create a temporary file\\n\");"              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  append     =     0   append data to temporary file\\n\");"        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  appvis     =     0   append data as visible characters\\n\");"    );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nstatistics...\\n\");"                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  PRCS       =     0   script ending\\n\");"                        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  DERAHS     =     0   local shared code ending\\n\");"             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  LABOLG     =     0   global shared code ending\\n\");"            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  GIFNOC     =     0   global shared code ending\\n\");"            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  TINU       =     0   full unit test ending\\n\");"                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  RETSAM     =     0   master file ending\\n\");"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  #========  =     0   ending comment\\n\");"                       );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\noroboros...\\n\");"                                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  WAVE       =     0   testing wave definition\\n\");"              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"  stage      =     0   testing stage definition\\n\");"             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"\\nend-of-entries...\\n\");"                                        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"TOTAL        =     0   count of all verb use\\n\");"                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   printf (\"concerns     =     0   records with troubles\\n\");"                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   return 0;"                                                                    );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "}"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}



/*===[[ MAIN FILE ]]==========================================================*/

int 
KOIOS_main_beg          (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   char        x_line      [LEN_RECD]  = "";
   int          n       = 0;
   yUNIT_mincond  ("verify output to main for beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nmain   , a_mark)   , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "int"                                                                             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "main                    (int a_argc, char *a_argv[])"                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "{"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   /*---(locals)-----------+-----+-----+-*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   int         rc          =    0;"                                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   /*---(prepare)------------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   rc = yUNIT_init ();"                                                          );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   rc = yUNIT_args (a_argc, a_argv);"                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   if (rc < 0)  return -1;"                                                      );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   yUNIT_unit (\"/tmp/apate\", cyUNIT.level, cyUNIT.eterm, cyUNIT.exec);"        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   /*---(beg scripts)--------------------*/"                                     );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_main_scrp              (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, char a_num)
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify MAIN output for script beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   sprintf (x_line, "   if (yUNIT_run_scrp (%2d) == 1)  yUNIT_script_%02d ();", a_num, a_num);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nmain   , a_mark)   , x_line );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nmain   , '>')      , "(n/a)"                                      );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_main_sect              (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, char a_desc [LEN_DESC])
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify MAIN output for shared beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   sprintf (x_line, "   if (cyUNIT.all          == 1)  yUNIT_sect      (\"%s\");", a_desc);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_nmain   , a_mark)   , x_line );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nmain   , '>')      , "(n/a)"                                      );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_main_end          (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   char        x_line      [LEN_RECD]  = "";
   int          n       = 0;
   yUNIT_mincond  ("verify output to main for end");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nmain   , a_mark)   , "   /*---(end scripts)--------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   rc = yUNIT_tinu (cyUNIT.exec);"                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   /*---(complete)-----------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "   return rc;"                                                                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "}"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "/* end-of-file.  done, finito, completare, whimper [Ï´···                     */");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nmain   , '>')      , "/*================================= end-code =================================*/");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int 
KOIOS_code_main         (char A_FILE [LEN_TITLE], int A_LINE, int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to code for main driver");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_ncode   , a_mark)   , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "int"                                                                             );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "main                    (int a_argc, char *a_argv[])"                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "{"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   /*---(locals)-----------+-----+-----+-*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   int         rc          =    0;"                                              );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   /*---(prepare)------------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   rc = yUNIT_init ();"                                                          );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   rc = yUNIT_args (a_argc, a_argv);"                                            );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   if (rc < 0)  return -1;"                                                      );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   yUNIT_unit (\"/tmp/apate\", cyUNIT.level, cyUNIT.eterm, cyUNIT.exec);"        );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   /*---(beg scripts)--------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   /*---(end scripts)--------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   rc = yUNIT_tinu (cyUNIT.exec);"                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   /*---(complete)-----------------------*/"                                     );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "   return rc;"                                                                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "}"                                                                               );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , ""                                                                                );
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/* end-of-file.  done, finito, completare, whimper [Ï´···                     */");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_ncode   , '>')      , "/*================================= end-code =================================*/");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}



/*===[[ CODE SCRP LEVEL ]]====================================================*/

int
KOIOS_code_scrp              (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_line, char a_seq, char a_stage [LEN_TERSE], char a_desc [LEN_DESC])
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify CODE output for script beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode  , a_mark)    , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "int"                                        );
   sprintf (x_line, "yUNIT_script_%02d          (void)", a_seq );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "{"                                          );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   /*===[[ script header ]]========================*/");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   cyUNIT.offset  = 0;"                     );
   sprintf (x_line, "   cyUNIT.origin  = %d;", a_seq);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   yUNIT_mode_reset ();"                    );
   sprintf (x_line, "   yUNIT_scrp    (%4d, %3d, \"%s\", \"%s\", \"\", \"\", \"\");", a_line, a_seq, a_stage, a_desc);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek     (sm_ncode   , '>')      , "   int mykoios_ncurr  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek     (sm_ncode   , '>')      , "   int mykoios_nshar  = 0;");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "(n/a)"                                      );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_code_shar             (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_line, char a_share, char a_desc [LEN_DESC])
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   uchar       x_char      =  '-';
   char        x_type      =  '-';
   x_char = a_share;
   if      (strchr (YSTR_UPPER, a_share) != NULL)   x_type = 'g';
   else if (strchr (YSTR_LOWER, a_share) != NULL)   x_type = 's';
   else if (strchr (YSTR_GREEK, a_share) != NULL) { x_type = 'c'; x_char  = a_share; x_char -= (uchar) 'è'; x_char += 'a';  }
   yUNIT_mincond  ("verify CODE output for shared beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode  , a_mark)    , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "int"                                        );
   switch (x_type) {
   case 'g'  :  sprintf (x_line, "yUNIT_global_%c           (char a_select)         /* %4d, %c, %-32.32s */", a_share, a_line, a_share, a_desc);  break;
   case 's'  :  sprintf (x_line, "yUNIT_shared_%c           (char a_select)         /* %4d, %c, %-32.32s */", a_share, a_line, a_share, a_desc);  break;
   case 'c'  :  sprintf (x_line, "yUNIT_config_%c           (char a_select)         /* %4d, %c, %-32.32s */", x_char , a_line, a_share, a_desc);  break;
   }
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "{"                                          );
   switch (x_type) {
   case 'g'  :
      yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   /*===[[ global header ]]========================*/");
      sprintf (x_line, "   yUNIT_glob ('%c', %d, a_select, \"%s\");", a_share, a_line, a_desc);
      break;
   case 's'  :
      yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   /*===[[ shared header ]]========================*/");
      sprintf (x_line, "   yUNIT_shar ('%c', %d, a_select, \"%s\");", a_share, a_line, a_desc);
      break;
   case 'c'  :
      yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   /*===[[ config header ]]========================*/");
      sprintf (x_line, "   yUNIT_conf ('%c', %d, a_select, \"%s\");", a_share, a_line, a_desc);
      break;
   }
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_code_rahs              (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_line, char a_share)
{
   char        n           =    0;
   char        x_line      [LEN_RECD]  = "";
   char        x_type      =  '-';
   if      (strchr (YSTR_UPPER, a_share) != NULL)   x_type = 'g';
   else if (strchr (YSTR_LOWER, a_share) != NULL)   x_type = 's';
   else if (strchr (YSTR_GREEK, a_share) != NULL)   x_type = 'c';
   yUNIT_mincond  ("verify output for empty script end");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   switch (x_type) {
   case 'g'  :
      yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , a_mark), "   /*===[[ global done ]]==========================*/");
      sprintf (x_line, "   yUNIT_bolg   ('%c', a_select,   0,   0, mykoios_ncond, mykoios_nstep);   /* %4d */", a_share, a_line);
      break;
   case 's'  :
      yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , a_mark), "   /*===[[ shared done ]]==========================*/");
      sprintf (x_line, "   yUNIT_rahs   ('%c', a_select,   0,   0, mykoios_ncond, mykoios_nstep);   /* %4d */", a_share, a_line);
      break;
   case 'c'  :
      yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , a_mark), "   /*===[[ config done ]]==========================*/");
      sprintf (x_line, "   yUNIT_fnoc   ('%c', a_select,   0,   0, mykoios_ncond, mykoios_nstep);   /* %4d */", a_share, a_line);
      break;
   }
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   return mykoios_ncond;"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "}"                                          );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int
KOIOS_code_prcs              (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_nline)
{
   char        n           =    0;
   char        x_line      [LEN_RECD]  = "";
   yUNIT_mincond  ("verify output for empty script end");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , a_mark)   , "   /*===[[ script done ]]==========================*/");
   sprintf (x_line, "   yUNIT_prcs    (cyUNIT.exec);                   /* %4d */", a_nline);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   return mykoios_ncond;"                   );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "}"                                          );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}



/*===[[ WAVE FILE ]]==========================================================*/

int
KOIOS_wave_scrp              (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, char a_num, char a_name [LEN_LABEL], char a_desc [LEN_DESC], char a_wave, char a_stage, char a_imp)
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify WAVE output for script end");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... set initial point"              , yENV_uindex    (sm_nwave   , a_mark - 1) , "¬");
   if (a_mark == 0) {
      yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nwave   , '>')  , "## ouroboros-aperantos (tail-eater) master unit testing sequencer");
      yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nwave   , '>')     , "## single unit test wave file");
      yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nwave   , '>')     , "##--  timestamp-----------------  epoch-----  project-------------  unit--------------------------  sc  S  description-----------------------------------------------------------  terse---------------  w  s  i  nun  nsc  nco  nstp  est  exp  R  pass  fail  badd  void  miss  act ");
   }
   sprintf (x_line, "WAVE  ¬¬.¬¬.¬¬.¬¬.¬¬.¬¬.¬.¬¬.¬¬¬  ¬¬¬¬¬¬¬¬¬¬  %-20.20s  %-30.30s  %2d  Ï  %-70.70s                        %c  %c  %c    0    1    0     0         0  -     0     0     0     0     0    0 ", a_name, a_name, a_num, a_desc, a_wave, a_stage, a_imp);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nwave   , '>')     , x_line );
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_nwave   , '>')     , "(n/a)"                                      );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}



/*===[[ CODE COND-level ]]====================================================*/

int 
KOIOS_code_cond             (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_line, int a_seq, char a_desc [LEN_DESC], char a_dittoing, char a_ditto, char a_which [LEN_TITLE], char a_share)
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify CODE output for condition beg");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   sprintf (x_line, "   /*===[[ COND #%03d ]]============================*/", a_seq);
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode  , a_mark)    , x_line);
   if (strcmp (a_which, "") == 0)  strcpy  (x_line, "   {  ++mykoios_ncond;");
   else                            sprintf (x_line, "   if (strchr (\"*%s\", a_select) != NULL) {  ++mykoios_ncond;", a_which);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , x_line);
   sprintf (x_line, "      yUNIT_cond    (%4d, cyUNIT.offset + mykoios_ncond, '%c', '%c', '%c', '%c', \"%s\");", a_line, a_dittoing, a_ditto, a_ditto, a_share, a_desc);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , "(n/a)"                                      );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

char
KOIOS_code_dnoc             (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_nline)
{
   char        x_line      [LEN_RECD]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify CODE output for condition end");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , a_mark)   , "      /*---(summary)---------------------*/");
   sprintf (x_line, "      yUNIT_dnoc    (cyUNIT.exec);                /* %4d */", a_nline);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode   , '>')      , "   }");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int 
KOIOS_code_group            (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_line, char a_desc [LEN_DESC], char a_which [LEN_TITLE])
{
   char        x_line      [LEN_RECD]  = "";
   char        t           [LEN_HUND]  = "";
   char        n           =    0;
   yUNIT_mincond  ("verify CODE output for group");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , sm_cmark) , "   /*===[[ GROUP ]]================================*/");
   sprintf (t     , "(\"%s\");", a_desc);
   sprintf (x_line, "   yUNIT_group   %-29.29s /* %4d, %-32.32s */", t, a_line, a_desc);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , "(n/a)"                                      );
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int 
KOIOS_code_reuse            (char A_FILE [LEN_TITLE], int A_LINE, int a_mark, int a_line, char a_desc [LEN_DESC], char a_which [LEN_TITLE], char a_off, char a_share, char a_select)
{
   char        x_line      [LEN_RECD]  = "";
   char        t           [LEN_HUND]  = "";
   char        n           =    0;
   char        x_type      =  '-';
   uchar       x_char      =  '-';
   yUNIT_mincond  ("verify CODE output for reuse");
   sprintf (sm_called, "%s (%d)", A_FILE, A_LINE);
   yUNIT_minstr   ("... CALLED BY"                      , sm_called                              ,  "¬");
   yUNIT_minstr   ("... check result"                   , yENV_uindex    (sm_ncode   , sm_cmark) , "   /*===[[ REUSE SHARE ]]==========================*/");
   if (strcmp (a_which, "") == 0)  strcpy  (x_line, "   {  ++mykoios_ncond;");
   else                            sprintf (x_line, "   if (strchr (\"*%s\", a_select) != NULL) {  ++mykoios_ncond;", a_which);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')       , "      cyUNIT.offset = mykoios_ncond - 1;");
   if      (strchr (YSTR_UPPER, a_share) != NULL)  x_type = 'g';
   else if (strchr (YSTR_LOWER, a_share) != NULL)  x_type = 's';
   else if (strchr (YSTR_GREEK, a_share) != NULL)  x_type = 'c';
   switch (x_type) {
   case 's' :
      sprintf (x_line, "      mykoios_ncurr = yUNIT_shared_%c ('%c');                       /* %4d, %-32.32s */", a_share, a_select, a_line, a_desc);
      break;
   case 'g' :
      sprintf (x_line, "      mykoios_ncurr = yUNIT_global_%c ('%c');                       /* %4d, %-32.32s */", a_share, a_select, a_line, a_desc);
      break;
   case 'c' :
      x_char  = a_share;
      x_char -= (uchar) 'è';
      x_char += 'a';
      sprintf (x_line, "      mykoios_ncurr = yUNIT_config_%c ('%c');     /* %c */           /* %4d, %-32.32s */", x_char, a_select, a_share, a_line, a_desc);
      break;
   }
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')      , x_line);
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')      , "      mykoios_ncond += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')      , "      mykoios_nshar += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')      , "      cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check result"                   , yENV_upeek     (sm_ncode  , '>')      , "   }");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1             ,  666);
   yUNIT_mindnoc  ();
   return n;
}



/*===[[ CODE COND-level ]]====================================================*/



/*===[[ CONV top-level ]]=====================================================*/

int 
KOIOS_conv_beg          (int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to CONV for beg");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv   , a_mark)   , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}

int 
KOIOS_conv_end          (int a_mark)
{
   int          n       = 0;
   yUNIT_mincond  ("verify output to CONV for beg");
   yUNIT_minstr   ("... check result"                   , yENV_uindex     (sm_nconv   , a_mark)   , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "TINU          final unit test statistics --------------------------------------   -     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek      (sm_nconv   , '>')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minval   ("... save spot"                      , n = yENV_uwhere    () + 1              ,  666);
   yUNIT_mindnoc  ();
   return n;
}



/*===[[ MASTER SOURCE DATA ]]=================================================*/

char
KOIOS_master_create    (void)
{  /*---(design notes)-------------------*/
   /*
    *    entries are intensionally unindented and squashed to push conversion a little
    */
   yUNIT_mincond ("prepare a master example (normal)");
   system ("rm -f /tmp/master.unit 2> /dev/null");
   system ("echo \"PREP        global function headers       \"                                                                >  /tmp/master.unit");
   system ("echo \"incl        fake header                    apate.h           \"                                             >> /tmp/master.unit");
   system ("echo \"global      global variable                - - - - - - - -   int h = 0;                            \"   >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"GLOBAL -D-  globally shared steps          0s  tbd        \"                                            >> /tmp/master.unit");
   system ("echo \"local       working variables              - - - - - - - -   int c = -1;                          \"    >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"COND        åxyzæ prepare variables       \"                                                                >> /tmp/master.unit");
   system ("echo \"code        åx··æ set new value            - - - - - - - -   c = 32 * 64;                         \"    >> /tmp/master.unit");
   system ("echo \"code        å·y·æ set new value            - - - - - - - -   c -= 20;                             \"    >> /tmp/master.unit");
   system ("echo \"code        å··zæ set new value            - - - - - - - -   c += 60;                             \"    >> /tmp/master.unit");
   system ("echo \"echo        åxz·æ check latest value       - - - - - - - -   c              i_greater   0     \"    >> /tmp/master.unit");
   system ("echo \"echo        åy··æ check latest value       - - - - - - - -   c              i_lesser    0     \"    >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"COND        å·æ generate a summary        \"                                                                >> /tmp/master.unit");
   system ("echo \"exec        å·æ check string               yUNIT_teststring  0              s_equal     hello \"    >> /tmp/master.unit");
   system ("echo \"get         åqæ check number               yUNIT_testreal    5              r_greater   15.0  \"    >> /tmp/master.unit");
   system ("echo \"exec        å·æ check integer              yUNIT_testint     32             i_equal     2     \"    >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"CONFIG -ò-  global interal steps           0s  tbd        \"                                            >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"COND        åabcæ prepare variables       \"                                                                >> /tmp/master.unit");
   system ("echo \"code        åabcæ ... set new value        - - - - - - - -   h = 96;                              \"    >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"COND        å·bcæ generate a summary      \"                                                                >> /tmp/master.unit");
   system ("echo \"echo        å·b·æ check working variable   - - - - - - - -   h              i_equal     96    \"    >> /tmp/master.unit");
   system ("echo \"system      åa··æ run little               - - - - - - - -   /bin/false                           \"    >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"GLOBAL -J-  globally set internal state    0s  tbd        \"                                            >> /tmp/master.unit");
   system ("echo \"\"                                                                                                              >> /tmp/master.unit");
   system ("echo \"COND        prepare variables             \"                                                                >> /tmp/master.unit");
   system ("echo \"code        ... set new value              - - - - - - - -   h = 96;                              \"    >> /tmp/master.unit");
   system ("echo \"mode        ... change mode                FORCED_FAIL      \"                                            >> /tmp/master.unit");
   system ("echo \"mode        ... change mode                normal           \"                                            >> /tmp/master.unit");
   yUNIT_minval   ("check scrp lines"                   , yENV_ulines     (sm_nmast   )         ,   34);
   yUNIT_mindnoc ();
   return 0;
}

int 
KOIOS_master_verify    (void)
{
   yUNIT_mincond ("verify the master example (convert)");
   yUNIT_minval   ("... converted count"                , yENV_ulines      (sm_nmast  ),   71);
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "PREP          global function headers                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   incl       fake header                          apate.h                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   global     global variable                      - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "GLOBAL   -D-  globally shared steps                                               0s  tbd             -                                                                            ((DD.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   local      working variables                    - - - - - - - - - - - - -   int c = -1;                                                                                                                                                                                                                ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   COND       åxyzæ prepare variables                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((DD.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     code     åx··æ set new value                  - - - - - - - - - - - - -   c = 32 * 64;                                                                                                                                                                                                               ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     code     å·y·æ set new value                  - - - - - - - - - - - - -   c -= 20;                                                                                                                                                                                                                   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     code     å··zæ set new value                  - - - - - - - - - - - - -   c += 60;                                                                                                                                                                                                                   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     echo     åxz·æ check latest value             - - - - - - - - - - - - -   c                                                                                                     i_greater   0                                                                                                    ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     echo     åy··æ check latest value             - - - - - - - - - - - - -   c                                                                                                     i_lesser    0                                                                                                    ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   COND       å·æ generate a summary                                             - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((DD.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     exec     å·æ check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     get      åqæ check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     exec     å·æ check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   LABOLG     global shared code statistics -----------------------------------   D     1     1     0     0     2     2     0  ··········     0  ·                        0  ·                        2     9     5     1     3     8     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "CONFIG   -ò-  global interal steps                                                0s  tbd             -                                                                            ((òò.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   COND       åabcæ prepare variables                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((òò.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     code     åabcæ ... set new value              - - - - - - - - - - - - -   h = 96;                                                                                                                                                                                                                    ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   COND       å·bcæ generate a summary                                           - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((òò.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     echo     å·b·æ check working variable         - - - - - - - - - - - - -   h                                                                                                     i_equal     96                                                                                                   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     system   åa··æ run little                     - - - - - - - - - - - - -   /bin/false                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   GIFNOC     global shared code statistics -----------------------------------   ò     1     1     0     0     2     2     0  ··········     0  ·                        0  ·                        2     3     2     0     1     3     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "GLOBAL   -J-  globally set internal state                                         0s  tbd             -                                                                            ((JJ.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   COND       prepare variables                                                  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((JJ.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     code     ... set new value                    - - - - - - - - - - - - -   h = 96;                                                                                                                                                                                                                    ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     mode     ... change mode                      FORCED_FAIL                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "     mode     ... change mode                      normal                      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "   LABOLG     global shared code statistics -----------------------------------   J     1     1     0     0     1     1     0  ··········     0  ·                        0  ·                        0     3     0     0     3     0     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nmast   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "RETSAM        final master file statistics ------------------------------------   -     3     3     0     0     5     5     0  ··········     0  ·                        0  ·                        4    15     7     1     7    11     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmast   , '>')      , "(n/a)");
   yUNIT_mindnoc ();
   return 0;
}

/*
 *  a = k100|lllDý5 xxxxxxxxxxxxxxxxxý5f>F"hDA");ý50n
 */

char
KOIOS_master_globals     (void)
{
   yUNIT_mincond ("verify master unit globals");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nglob   , '[')      , "D     5  globally shared steps                                                 1     1     0     0     2     2     0  ··········     0  ·                        0  ·                        2     9     5     1     3     8     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nglob   , '>')      , "J    29  globally set internal state                                           1     1     0     0     1     1     0  ··········     0  ·                        0  ·                        0     3     0     0     3     0     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nglob   , '>')      , "ò    20  global interal steps                                                  1     1     0     0     2     2     0  ··········     0  ·                        0  ·                        2     3     2     0     1     3     0     0     0     0   ");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nglob   , '>')      , "(n/a)");
   yUNIT_minval  ("... check count"                    , yENV_ulines(sm_nglob)     ,    3);
   yUNIT_mindnoc ();
   return 0;
}

char
KOIOS_master_head        (void)
{
   yUNIT_mincond  ("verify master unit globals");
   yUNIT_minval   ("... check count"                    , yENV_ulines (sm_nmhead)    ,  152);
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '[')      , "/*================================= beg-code =================================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "/* /usr/local/bin/koios                                                       */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "/*   autogen by koios-polos (axis of heaven) unit testing meta-language       */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "/*================================ beg-global ================================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "#include    \"apate.h\"                            /*    9, fake header                      */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "/*---(global variable)-------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "int h = 0;                                        /*   10, global variable                  */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "int");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "yUNIT_global_D           (char a_select)         /*   16, D, globally shared steps            */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "{");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ global header ]]========================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_glob ('D', 16, a_select, \"globally shared steps\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_local   (  17,   1, \"working variables\", \"int c = -1;\", cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int c = -1;                                       /*   17, working variables                */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   if (strchr (\"*xyz\", a_select) != NULL) {  ++mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_cond    (  19, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'D', \"åxyzæ prepare variables\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(inject code)-----------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*x··\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_code    (  20,   1, \"åx··æ set new value\", \"c = 32 * 64;\", cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec) { c = 32 * 64; }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(inject code)-----------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*·y·\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_code    (  21,   2, \"å·y·æ set new value\", \"c -= 20;\", cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec) { c -= 20; }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(inject code)-----------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*··z\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_code    (  22,   3, \"å··zæ set new value\", \"c += 60;\", cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec) { c += 60; }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*xz·\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_int     (  23,   4, \"åxz·æ check latest value\", \"- - - - - - - - - - - - -\", \"c\", \"i_greater\", 0, c, cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*y··\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_int     (  24,   5, \"åy··æ check latest value\", \"- - - - - - - - - - - - -\", \"c\", \"i_lesser\", 0, c, cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   26 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ COND #002 ]]============================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   if (strchr (\"*·\", a_select) != NULL) {  ++mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_cond    (  26, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'D', \"å·æ generate a summary\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*·\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_reset_rc ();");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_string  (  27,   1, \"å·æ check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(check result)----------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*q\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_reset_rc ();");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_real    (  28,   2, \"åqæ check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*·\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_reset_rc ();");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_int     (  29,   3, \"å·æ check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', 'D');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   38 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ global done ]]==========================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_bolg   ('D', a_select,   2,   9, mykoios_ncond, mykoios_nstep);   /*   38 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "}");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "int"); 
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "yUNIT_config_k           (char a_select)         /*   38, ò, global interal steps             */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "{");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ config header ]]========================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_conf ('ò', 38, a_select, \"global interal steps\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   if (strchr (\"*abc\", a_select) != NULL) {  ++mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_cond    (  40, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'ò', \"åabcæ prepare variables\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(inject code)-----------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*abc\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_code    (  41,   1, \"åabcæ ... set new value\", \"h = 96;\", cyUNIT.exec, '-', 'ò');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         if (cyUNIT.exec) { h = 96; }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   43 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ COND #002 ]]============================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   if (strchr (\"*·bc\", a_select) != NULL) {  ++mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_cond    (  43, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'ò', \"å·bcæ generate a summary\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*·b·\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_int     (  44,   1, \"å·b·æ check working variable\", \"- - - - - - - - - - - - -\", \"h\", \"i_equal\", 96, h, cyUNIT.exec, '-', 'ò');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(system command)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (strchr (\"*a··\", a_select) != NULL) {  ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "         yUNIT_system  (  45,   2, \"åa··æ run little\", \"/bin/false\", \"/bin/false\", cyUNIT.exec, '-', 'ò');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   54 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ config done ]]==========================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_fnoc   ('ò', a_select,   2,   3, mykoios_ncond, mykoios_nstep);   /*   54 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "}");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "int"); 
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "yUNIT_global_J           (char a_select)         /*   54, J, globally set internal state      */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "{");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ global header ]]========================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_glob ('J', 54, a_select, \"globally set internal state\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_cond    (  56, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'J', \"prepare variables\");");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(inject code)-----------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_code    (  57,   1, \"... set new value\", \"h = 96;\", cyUNIT.exec, '-', 'J');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      if (cyUNIT.exec) { h = 96; }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(unit test mode)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_mode    (  58,   2, \"... change mode\", \"FORCED_FAIL\", cyUNIT.exec, '-', 'J');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(unit test mode)--------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_mode    (  59,   3, \"... change mode\", \"normal\", cyUNIT.exec, '-', 'J');");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   71 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   }");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*===[[ global done ]]==========================*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   yUNIT_bolg   ('J', a_select,   1,   3, mykoios_ncond, mykoios_nstep);   /*   71 */");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "}");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "");
   yUNIT_minstr   ("... line"                           , yENV_upeek       (sm_nmhead  , '>')      , "/*================================ end-global ================================*/");
   yUNIT_mindnoc  ();
   return 0;
}

int   /* zero padding spaces or lines */
KOIOS_master_packed    (void)
{
   yUNIT_mincond ("prepare a master example (with zero padding)");
   system ("echo \"PREPglobal function headers\"                                     >  /tmp/master.unit");
   system ("echo \"inclfake headerapate.h \"                                         >> /tmp/master.unit");
   system ("echo \"globalglobal variable-int h=0; \"                             >> /tmp/master.unit");
   system ("echo \"GLOBAL -D-globally shared steps0stbd\"                        >> /tmp/master.unit");
   system ("echo \"local å·æ... working variables -int c=0;\"                    >> /tmp/master.unit");
   system ("echo \"CONDå·æprepare variables\"                                        >> /tmp/master.unit");
   system ("echo \"codeå·æ... set new value-h=32*64;\"                           >> /tmp/master.unit");
   system ("echo \"CONDå·ægenerate a summary\"                                       >> /tmp/master.unit");
   system ("echo \"execå·æ... check stringyUNIT_teststring0s_equalhello\"    >> /tmp/master.unit");
   system ("echo \"execåqæ... check numberyUNIT_testreal5r_greater15.0\"     >> /tmp/master.unit");
   system ("echo \"execå·æ... check integeryUNIT_testint32i_equal2\"         >> /tmp/master.unit");
   system ("echo \"CONFIG -ò-global interal steps0stbd\"                         >> /tmp/master.unit");
   system ("echo \"CONDåabcæprepare variables\"                                      >> /tmp/master.unit");
   system ("echo \"codeåabcæ... set new value-h=32*64;\"                         >> /tmp/master.unit");
   system ("echo \"CONDå·bcægenerate a summary\"                                     >> /tmp/master.unit");
   system ("echo \"execå·b·æ... check stringyUNIT_teststring0s_equalhello\"  >> /tmp/master.unit");
   system ("echo \"execå··cæ... check numberyUNIT_testreal5r_greater15.0\"   >> /tmp/master.unit");
   system ("echo \"execå·b·æ... check integeryUNIT_testint32i_equal2\"       >> /tmp/master.unit");
   yUNIT_mindnoc ();
   return 0;
}

int 
KOIOS_dataset_create   (void)
{
   yUNIT_mincond ("prepare a interesting example");
   system ("rm -f /tmp/apate.unit 2> /dev/null");
   system ("echo \"#23456789-12  123456789-123456789-123456789-12345  123456789-123456  123456789-123456789-  123456789-  123456789-123456789-  123456789- \"        > /tmp/apate.unit");
   system ("echo \"#==(verb)===  ===========(description)===========  =====(function)=  ====(arguments)=====  ==(test)==  ====(results)=======  =(var)==== \"       >> /tmp/apate.unit");
   system ("echo \"PREP          global function headers             \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  incl        fake header                          apate.h           \"                                                                                    >> /tmp/apate.unit");
   system ("echo \"  global      global variable                      - - - - - - - -   float pi = 3.1415927;                                                    \"       >> /tmp/apate.unit");
   system ("echo \"SECT          simple testing                      \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"SCRP  [1a/A]  (SCRP) verify openning and closing   2s  tbd        \"                                                                                   >> /tmp/apate.unit");
   system ("echo \"  local       ... working variables                - - - - - - - -   int c = 0;                                                      \"                >> /tmp/apate.unit");
   system ("echo \"  COND        simple openning                     \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"  COND   (1)  defensive checks                    \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    load      ... prep data for read               stdin             one two three                                                   \"                >> /tmp/apate.unit");
   system ("echo \"    get       ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"  DITTO  (1)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  COND        small condition                     \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"  DITTO  (1)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  COND        duplicate opens and closes          \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    echo      ... check working variable           - - - - - - - -   c                         i_equal     0                     \"                >> /tmp/apate.unit");
   system ("echo \"    load      ... prep data for read               stdin             one two three                                                   \"                >> /tmp/apate.unit");
   system ("echo \"    mode      ... update mode                      FORCED_FAIL                        \"                                                                 >> /tmp/apate.unit");
   system ("echo \"    system    ... run little                       - - - - - - - -   /bin/false                                                      \"                >> /tmp/apate.unit");
   system ("echo \"SECT          more complex testing                \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"SHARED   -a-  prepare files for use                1m  tbd         \"                                                                                  >> /tmp/apate.unit");
   system ("echo \"  COND        script input file                   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    mode      ... update mode                      normal                             \"                                                                 >> /tmp/apate.unit");
   system ("echo \"  COND        code output file                    \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"SHARED   -b-  remove files after use               4s  tbd         \"                                                                                  >> /tmp/apate.unit");
   system ("echo \"  COND        code output file                    \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"  COND        close and delete code file          \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"SCRP    [1b]  (SCRP) verify system startup          0s  tbd                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"  local       ... create string                    - - - - - - - -   char  x_str [100];                                              \"                >> /tmp/apate.unit");
   system ("echo \"  local       ... create integer                   - - - - - - - -   int   x_int  = 0;                                               \"                >> /tmp/apate.unit");
   system ("echo \"  local       ... create number                    - - - - - - - -   float x_real = 0.0;                                             \"                >> /tmp/apate.unit");
   system ("echo \"  local       ... create character                 - - - - - - - -   char  x_char = 0;                                               \"                >> /tmp/apate.unit");
   system ("echo \"  local       ... create pointer                   - - - - - - - -   int  *x_ptr  = NULL;                                            \"                >> /tmp/apate.unit");
   system ("echo \"  COND        run initialization                  \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    mode      ... update mode                      FORCED_FAIL                        \"                                                                 >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"    mode      ... update mode                      normal                             \"                                                                 >> /tmp/apate.unit");
   system ("echo \"  REUSE  -b-  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  REUSE  D/x  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  COND        parse a code record                 \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                  x_str  \"        >> /tmp/apate.unit");
   system ("echo \"    echo      ... verify string                    - - - - - - - -   x_str                     s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                   x_real \"        >> /tmp/apate.unit");
   system ("echo \"    echo      ... verify number                    - - - - - - - -   x_real                    r_lesser    16.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                      x_int  \"        >> /tmp/apate.unit");
   system ("echo \"    echo      ... verify integer                   - - - - - - - -   x_int                     i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                    x_char \"        >> /tmp/apate.unit");
   system ("echo \"    echo      ... verify character                 - - - - - - - -   x_char                    i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check pointer                    yUNIT_testptr                               p_exists    0                      x_ptr  \"        >> /tmp/apate.unit");
   system ("echo \"    echo      ... verify pointer                   - - - - - - - -   x_ptr                     p_exists    0                     \"                >> /tmp/apate.unit");
   system ("echo \"    echo      ... verify value at pointer          - - - - - - - -   (x_ptr) ? *x_ptr : 0      i_equal     42                    \"                >> /tmp/apate.unit");
   system ("echo \"SCRP    [1c]  (SCRP) verify normal processing       5s  tbd                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"  GROUP       round one                           \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  COND   (1)  process arguments                   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  0                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    5                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     32                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    65                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"  REUSE  -a-  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  COND   (2)  read one record                     \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"    exec      ... check string                     yUNIT_teststring  1                         s_equal     hello                 \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check number                     yUNIT_testreal    2                         r_greater   15.0                  \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check integer                    yUNIT_testint     64                        i_equal     2                     \"                >> /tmp/apate.unit");
   system ("echo \"    exec      ... check character                  yUNIT_testchar    87                        i_equal     'A'                   \"                >> /tmp/apate.unit");
   system ("echo \"  GROUP       round two                           \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  DITTO  (1)  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  REUSE  ò/a  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  GROUP       final round                         \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  DITTO  (2)  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  REUSE  D/z  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"  DITTO  (1)  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"SCRP  [1d/s]  (SCRP) empty script                   0s  tbd                          \"                                                              >> /tmp/apate.unit");
   yUNIT_minval   ("check scrp lines"                   , yENV_ulines     (sm_nscrp   )         ,   97);
   yUNIT_mindnoc ();

   return 0;
}

char
KOIOS_dataset_verify   (void)
{
   yUNIT_mincond ("verify header");
   yUNIT_minval   ("... converted count"                , yENV_ulines      (sm_nscrp  ),  194);
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify PREP");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "PREP          global function headers                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   incl       fake header                          apate.h                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   global     global variable                      - - - - - - - - - - - - -   float pi = 3.1415927;                                                                                                                                                                                                      ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify SECT");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SECT          simple testing                                                     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script with dittoing");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1a/A]  (SCRP) verify openning and closing                                  2s  tbd             -                                                                            ((01.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   local      ... working variables                - - - - - - - - - - - - -   int c = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       simple openning                                                    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND  (1)  defensive checks                                                   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     load     ... prep data for read               stdin                       one two three                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     get      ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DITTO (1)  [ defensive checks ] - - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.003))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       small condition                                                    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.004))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DITTO (1)  [ defensive checks ] - - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.005))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       duplicate opens and closes                                         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.006))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... check working variable           - - - - - - - - - - - - -   c                                                                                                     i_equal     0                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     load     ... prep data for read               stdin                       one two three                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     mode     ... update mode                      FORCED_FAIL                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     system   ... run little                       - - - - - - - - - - - - -   /bin/false                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   1     1     0     0     1     6     4     2  ·2········     0  ·                        0  ·                        0    14    10     1     3     0     8     6     2     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify sect");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SECT          more complex testing                                               - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify shared a");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SHARED   -a-  prepare files for use                                               1m  tbd             -                                                                            ((aa.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       script input file                                                  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((aa.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     mode     ... update mode                      normal                      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       code output file                                                   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((aa.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   a     1     0     1     0     2     2     0  ··········     0  ·                        0  ·                        0     8     7     0     1     0     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify shared b");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SHARED   -b-  remove files after use                                              4s  tbd             -                                                                            ((bb.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       code output file                                                   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((bb.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       close and delete code file                                         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((bb.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   b     1     0     1     0     2     2     0  ··········     0  ·                        0  ·                        0     8     8     0     0     0     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script with a reuse");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1b/·]  (SCRP) verify system startup                                        0s  tbd             -                                                                            ((02.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   local      ... create string                    - - - - - - - - - - - - -   char  x_str [100];                                                                                                                                                                                                         ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   local      ... create integer                   - - - - - - - - - - - - -   int   x_int  = 0;                                                                                                                                                                                                          ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   local      ... create number                    - - - - - - - - - - - - -   float x_real = 0.0;                                                                                                                                                                                                        ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   local      ... create character                 - - - - - - - - - - - - -   char  x_char = 0;                                                                                                                                                                                                          ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   local      ... create pointer                   - - - - - - - - - - - - -   int  *x_ptr  = NULL;                                                                                                                                                                                                       ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       run initialization                                                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     mode     ... update mode                      FORCED_FAIL                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     mode     ... update mode                      normal                      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   REUSE b/*  [ remove files after use ] - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   REUSE D/x  [ globally shared steps ]- - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.003))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND       parse a code record                                                - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((02.004))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                 x_str                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... verify string                    - - - - - - - - - - - - -   x_str                                                                                                 s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                  x_real               ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... verify number                    - - - - - - - - - - - - -   x_real                                                                                                r_lesser    16.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                     x_int                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... verify integer                   - - - - - - - - - - - - -   x_int                                                                                                 i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                   x_char               ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... verify character                 - - - - - - - - - - - - -   x_char                                                                                                i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check pointer                    yUNIT_testptr                                                                                                                     p_exists    0                                                                                                     x_ptr                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... verify pointer                   - - - - - - - - - - - - -   x_ptr                                                                                                 p_exists    0                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     echo     ... verify value at pointer          - - - - - - - - - - - - -   (x_ptr) ? *x_ptr : 0                                                                                  i_equal     42                                                                                                   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   2     1     0     0     1     4     2     0  ··········     1  b                        1  D                        0    21    14     5     2     0     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify script with multiple reuses and dittos");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1c/·]  (SCRP) verify normal processing                                     5s  tbd             -                                                                            ((03.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   GROUP      ===[[ round one ]]===============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND  (1)  process arguments                                                  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               32                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              65                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   REUSE a/*  [ prepare files for use ]- - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   COND  (2)  read one record                                                    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.003))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check string                     yUNIT_teststring            1                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check number                     yUNIT_testreal              2                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check integer                    yUNIT_testint               64                                                                                                    i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "     exec     ... check character                  yUNIT_testchar              87                                                                                                    i_equal     'A'                                                                                                  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   GROUP      ===[[ round two ]]===============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DITTO (1)  [ process arguments ]- - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.004))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   REUSE ò/a  [ global interal steps ] - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.005))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   GROUP      ===[[ final round ]]=============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DITTO (2)  [ read one record ]- - - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.006))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   REUSE D/z  [ globally shared steps ]- - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.007))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DITTO (1)  [ process arguments ]- - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((03.008))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   3     1     0     0     1     8     2     3  ·21·······     1  a                        2  òD                       0     8     8     0     0     0    12    12     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify empty script");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1d/s]  (SCRP) empty script                                                 0s  tbd             -                                                                            ((04.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   4     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify footer");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     6     0     2     4    22    12     5  ··········     2  ba                       3  Dò                       0    59    47     6     6     0    20    18     2     0   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "(n/a)");
   yUNIT_mindnoc ();

   return 0;
}

char
KOIOS_dataset_encoded  (void)
{
   yUNIT_mincond ("verify header");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '[')      , "/*================================= beg-code =================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/* /usr/local/bin/koios                                                       */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/*   autogen by koios-polos (axis of heaven) unit testing meta-language       */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/*---(standard support functions)----*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "#include    <yURG.h>");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "#include    <yUNIT_unit.h>");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "#include    \"master.h\"");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/*================================ beg-script ================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "#include    \"apate.h\"                            /*    9, fake header                      */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/*---(global variable)-------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "float pi = 3.1415927;                             /*   10, global variable                  */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("first script");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int"); 
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_script_01          (void)");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script header ]]========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.origin  = 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_mode_reset ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_scrp    (  22,   1, \"1a/A\", \"(SCRP) verify openning and closing\", \"2s\", \"tbd\", \"-\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncurr  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nshar  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_local   (  23,   1, \"... working variables\", \"int c = 0;\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int c = 0;                                        /*   23, ... working variables            */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  25, cyUNIT.offset + mykoios_ncond, '-', '-', '-', '-', \"simple openning\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  (  26,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  27,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  28,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  29,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   31 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #002 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  31, cyUNIT.offset + mykoios_ncond, '-', '1', '-', '-', \"defensive checks\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(load input)------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_load    (  32,   1, \"... prep data for read\", \"stdin\", \"one two three\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(check result)----------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  33,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  34,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  35,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   37 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #003 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  37, cyUNIT.offset + mykoios_ncond, 'y', '-', '1', '-', \"defensive checks\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(load input)------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_load    (  32,   1, \"... prep data for read\", \"stdin\", \"one two three\", cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(check result)----------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  33,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  34,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  35,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   39 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #004 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  39, cyUNIT.offset + mykoios_ncond, '-', '-', '-', '-', \"small condition\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  (  40,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   42 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #005 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  42, cyUNIT.offset + mykoios_ncond, 'y', '-', '1', '-', \"defensive checks\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(load input)------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_load    (  32,   1, \"... prep data for read\", \"stdin\", \"one two three\", cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(check result)----------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  33,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  34,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  35,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   44 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #006 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  44, cyUNIT.offset + mykoios_ncond, '-', '-', '-', '-', \"duplicate opens and closes\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  45,   1, \"... check working variable\", \"- - - - - - - - - - - - -\", \"c\", \"i_equal\", 0, c, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(load input)------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_load    (  46,   2, \"... prep data for read\", \"stdin\", \"one two three\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(unit test mode)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_mode    (  47,   3, \"... update mode\", \"FORCED_FAIL\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(system command)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_system  (  48,   4, \"... run little\", \"/bin/false\", \"/bin/false\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   57 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script done ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_prcs    (cyUNIT.exec);                   /*   57 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("first shared");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int"); 
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_shared_a           (char a_select)         /*   63, a, prepare files for use            */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ shared header ]]========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_shar ('a', 63, a_select, \"prepare files for use\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  65, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'a', \"script input file\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  (  66,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  67,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  68,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(unit test mode)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_mode    (  69,   4, \"... update mode\", \"normal\", cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   71 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #002 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  71, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'a', \"code output file\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  (  72,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  73,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  74,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  75,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', 'a');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   84 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ shared done ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_rahs   ('a', a_select,   2,   8, mykoios_ncond, mykoios_nstep);   /*   84 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond ("second shared");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int"); 
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_shared_b           (char a_select)         /*   84, b, remove files after use           */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ shared header ]]========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_shar ('b', 84, a_select, \"remove files after use\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  86, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'b', \"code output file\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  (  87,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  88,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  89,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  90,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*   92 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #002 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    (  92, cyUNIT.offset + mykoios_ncond, '-', '-', '-', 'b', \"close and delete code file\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  (  93,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    (  94,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  95,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     (  96,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', 'b');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*  105 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ shared done ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_rahs   ('b', a_select,   2,   8, mykoios_ncond, mykoios_nstep);   /*  105 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond ("second script");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int"); 
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_script_02          (void)");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script header ]]========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.origin  = 2;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_mode_reset ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_scrp    ( 105,   2, \"1b/·\", \"(SCRP) verify system startup\", \"0s\", \"tbd\", \"-\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncurr  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nshar  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_local   ( 106,   1, \"... create string\", \"char  x_str [100];\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   char  x_str [100];                                /*  106, ... create string                */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_local   ( 107,   2, \"... create integer\", \"int   x_int  = 0;\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int   x_int  = 0;                                 /*  107, ... create integer               */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_local   ( 108,   3, \"... create number\", \"float x_real = 0.0;\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   float x_real = 0.0;                               /*  108, ... create number                */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_local   ( 109,   4, \"... create character\", \"char  x_char = 0;\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   char  x_char = 0;                                 /*  109, ... create character             */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(local variable)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_local   ( 110,   5, \"... create pointer\", \"int  *x_ptr  = NULL;\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int  *x_ptr  = NULL;                              /*  110, ... create pointer               */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 112, cyUNIT.offset + mykoios_ncond, '-', '-', '-', '-', \"run initialization\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 113,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(unit test mode)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_mode    ( 114,   2, \"... update mode\", \"FORCED_FAIL\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 115,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 116,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(unit test mode)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_mode    ( 117,   5, \"... update mode\", \"normal\", cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*  119 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ REUSE SHARE ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset = mykoios_ncond - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncurr = yUNIT_shared_b ('*');                       /*  119, [ remove files after use ] - - - */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncond += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_nshar += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ REUSE SHARE ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset = mykoios_ncond - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncurr = yUNIT_global_D ('x');                       /*  121, [ globally shared steps ]- - - - */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncond += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_nshar += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #004 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 123, cyUNIT.offset + mykoios_ncond, '-', '-', '-', '-', \"parse a code record\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 124,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec) { if (cyUNIT.s_rc != NULL)  strcpy (x_str, cyUNIT.s_rc); }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 125,   2, \"... verify string\", \"- - - - - - - - - - - - -\", \"x_str\", \"s_equal\", \"hello\", x_str, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 126,   3, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  x_real = cyUNIT.r_rc;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 127,   4, \"... verify number\", \"- - - - - - - - - - - - -\", \"x_real\", \"r_lesser\", 16.0, x_real, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 128,   5, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  x_int = cyUNIT.i_rc;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 129,   6, \"... verify integer\", \"- - - - - - - - - - - - -\", \"x_int\", \"i_equal\", 2, x_int, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 130,   7, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  x_char = cyUNIT.i_rc;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 131,   8, \"... verify character\", \"- - - - - - - - - - - - -\", \"x_char\", \"i_equal\", 'A', x_char, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.p_rc = yUNIT_testptr ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_point   ( 132,   9, \"... check pointer\", \"yUNIT_testptr\", \"\", \"p_exists\", 0, cyUNIT.p_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  x_ptr = cyUNIT.p_rc;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_point   ( 133,  10, \"... verify pointer\", \"- - - - - - - - - - - - -\", \"x_ptr\", \"p_exists\", 0, x_ptr, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(echo to verify)--------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 134,  11, \"... verify value at pointer\", \"- - - - - - - - - - - - -\", \"(x_ptr) ? *x_ptr : 0\", \"i_equal\", 42, (x_ptr) ? *x_ptr : 0, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /* -113 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script done ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_prcs    (cyUNIT.exec);                   /* -113 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond ("third script");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int"); 
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_script_03          (void)");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script header ]]========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.origin  = 3;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_mode_reset ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_scrp    ( 143,   3, \"1c/·\", \"(SCRP) verify normal processing\", \"5s\", \"tbd\", \"-\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncurr  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nshar  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ GROUP ]]================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_group   (\"round one\");                /*  145, round one                        */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #001 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 147, cyUNIT.offset + mykoios_ncond, '-', '1', '-', '-', \"process arguments\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 148,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 149,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 150,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 151,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /* -103 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ REUSE SHARE ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset = mykoios_ncond - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncurr = yUNIT_shared_a ('*');                       /*  153, [ prepare files for use ]- - - - */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncond += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_nshar += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #003 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 155, cyUNIT.offset + mykoios_ncond, '-', '2', '-', '-', \"read one record\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (1);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 156,   1, \"... check string\", \"yUNIT_teststring\", \"1\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (2);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 157,   2, \"... check number\", \"yUNIT_testreal\", \"2\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (64);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 158,   3, \"... check integer\", \"yUNIT_testint\", \"64\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (87);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 159,   4, \"... check character\", \"yUNIT_testchar\", \"87\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, '-', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*  -95 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ GROUP ]]================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_group   (\"round two\");                /*  161, round two                        */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #004 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 163, cyUNIT.offset + mykoios_ncond, 'y', '-', '1', '-', \"process arguments\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 148,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 149,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 150,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 151,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*  -91 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ REUSE SHARE ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset = mykoios_ncond - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncurr = yUNIT_config_k ('a');     /* ò */           /*  165, [ global interal steps ] - - - - */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncond += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_nshar += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ GROUP ]]================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_group   (\"final round\");              /*  167, final round                      */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #006 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 169, cyUNIT.offset + mykoios_ncond, 'y', '-', '2', '-', \"read one record\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (1);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 156,   1, \"... check string\", \"yUNIT_teststring\", \"1\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (2);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 157,   2, \"... check number\", \"yUNIT_testreal\", \"2\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (64);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 158,   3, \"... check integer\", \"yUNIT_testint\", \"64\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (87);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 159,   4, \"... check character\", \"yUNIT_testchar\", \"87\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*  -85 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ REUSE SHARE ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset = mykoios_ncond - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncurr = yUNIT_global_D ('z');                       /*  171, [ globally shared steps ]- - - - */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_ncond += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      mykoios_nshar += mykoios_ncurr - 1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ COND #008 ]]============================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   {  ++mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_cond    ( 173, cyUNIT.offset + mykoios_ncond, 'y', '-', '1', '-', \"process arguments\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.s_rc = yUNIT_teststring (0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_string  ( 148,   1, \"... check string\", \"yUNIT_teststring\", \"0\", \"s_equal\", \"hello\", cyUNIT.s_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.r_rc = yUNIT_testreal (5);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_real    ( 149,   2, \"... check number\", \"yUNIT_testreal\", \"5\", \"r_greater\", 15.0, cyUNIT.r_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testint (32);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 150,   3, \"... check integer\", \"yUNIT_testint\", \"32\", \"i_equal\", 2, cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(run step)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      ++mykoios_nstep;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_reset_rc ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      if (cyUNIT.exec)  cyUNIT.i_rc = yUNIT_testchar (65);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_int     ( 151,   4, \"... check character\", \"yUNIT_testchar\", \"65\", \"i_equal\", 'A', cyUNIT.i_rc, cyUNIT.exec, 'y', '-');");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(summary)---------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      yUNIT_dnoc    (cyUNIT.exec);                /*  -74 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "      /*---(done)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   }");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script done ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_prcs    (cyUNIT.exec);                   /*  -74 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond ("fourth script");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int"); 
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_script_04          (void)");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script header ]]========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.offset  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   cyUNIT.origin  = 4;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_mode_reset ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_scrp    ( 182,   4, \"1d/s\", \"(SCRP) empty script\", \"0s\", \"tbd\", \"-\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncond  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nstep  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_ncurr  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int mykoios_nshar  = 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*===[[ script done ]]==========================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_prcs    (cyUNIT.exec);                   /*  -62 */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return mykoios_ncond;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond ("statistics");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/*================================ end-script ================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "char");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_stats     (void)");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_unique (4, 0, 0, 4, 0, 0);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "char");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "yUNIT_verbs (void)");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"koios, record type summary\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\noverall...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  PREP       =     0   preparation before testing\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  incl       =     0   c header inclusion\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  #>         =     0   script internal comments\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nscripts...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  SCRP       =     0   test script header\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  SHARED     =     0   shared code between scripts\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  GLOBAL     =     0   shared code between units\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  CONFIG     =     0   shared code between units\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  SECT       =     0   grouping of scripts\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nconditions...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  COND       =     0   test condition\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  DITTO      =     0   repeated test condition\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  REUSE      =     0   inclusion of shared code\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  GROUP      =     0   grouping of conditions\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nvariables...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  global     =     0   global/unit variable defn\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  local      =     0   local/script variable defn\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nsteps...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  exec       =     0   function execution\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  get        =     0   unit test accessor retrieval\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  echo       =     0   test a variable directly\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nspecialty...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  code       =     0   insert c code\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  system     =     0   execute shell code\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  load       =     0   place data into input\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  mode       =     0   set pass or forced_fail mode\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nsupport...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  file       =     0   create a temporary file\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  append     =     0   append data to temporary file\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  appvis     =     0   append data as visible characters\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nstatistics...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  PRCS       =     0   script ending\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  DERAHS     =     0   local shared code ending\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  LABOLG     =     0   global shared code ending\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  GIFNOC     =     0   global shared code ending\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  TINU       =     0   full unit test ending\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  RETSAM     =     0   master file ending\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  #========  =     0   ending comment\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\noroboros...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  WAVE       =     0   testing wave definition\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"  stage      =     0   testing stage definition\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"\\nend-of-entries...\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"TOTAL        =     0   count of all verb use\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   printf (\"concerns     =   133   records with troubles\\n\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return 0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond ("main");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "int");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "main                    (int a_argc, char *a_argv[])");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "{");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(locals)-----------+-----+-----+-*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   int         rc          =    0;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(prepare)------------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   rc = yUNIT_init ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   rc = yUNIT_args (a_argc, a_argv);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (rc < 0)  return -1;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   yUNIT_unit (\"apate\", cyUNIT.level, cyUNIT.eterm, cyUNIT.exec);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(beg scripts)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (cyUNIT.all          == 1)  yUNIT_sect      (\"simple testing\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (yUNIT_run_scrp ( 1) == 1)  yUNIT_script_01 ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (cyUNIT.all          == 1)  yUNIT_sect      (\"more complex testing\");");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (yUNIT_run_scrp ( 2) == 1)  yUNIT_script_02 ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (yUNIT_run_scrp ( 3) == 1)  yUNIT_script_03 ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   if (yUNIT_run_scrp ( 4) == 1)  yUNIT_script_04 ();");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(end scripts)--------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   rc = yUNIT_tinu (cyUNIT.exec);");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   /*---(complete)-----------------------*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "   return rc;");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "}");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/* end-of-file.  done, finito, completare, whimper [Ï´···                     */");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "/*================================= end-code =================================*/");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nconv   , '>')      , "(n/a)");
   yUNIT_mindnoc  ();

   return 0;
}

char
KOIOS_dataset_wave     (void)
{
   yUNIT_mincond  ("verify writing to WAVE file");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '[')   , "## ouroboros-aperantos (tail-eater) master unit testing sequencer");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "## single unit test wave file");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "##--  timestamp-----------------  epoch-----  project-------------  unit--------------------------  sc  S  description-----------------------------------------------------------  terse---------------  w  s  i  nun  nsc  nco  nstp  est  exp  R  pass  fail  badd  void  miss  act ");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "WAVE  ¬¬.¬¬.¬¬.¬¬.¬¬.¬¬.¬.¬¬.¬¬¬  ¬¬¬¬¬¬¬¬¬¬  apate                 apate                            1  Ï  (SCRP) verify openning and closing                                      tbd                   1  a  A    0    1    6    22   0s    0  -     0     0     0     0    22    0 ");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "WAVE  ¬¬.¬¬.¬¬.¬¬.¬¬.¬¬.¬.¬¬.¬¬¬  ¬¬¬¬¬¬¬¬¬¬  apate                 apate                            2  Ï  (SCRP) verify system startup                                            tbd                   1  b  ·    0    1    4    28   0s    0  -     0     0     0     0    28    0 ");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "WAVE  ¬¬.¬¬.¬¬.¬¬.¬¬.¬¬.¬.¬¬.¬¬¬  ¬¬¬¬¬¬¬¬¬¬  apate                 apate                            3  Ï  (SCRP) verify normal processing                                         tbd                   1  c  ·    0    1   11    40   0s    0  -     0     0     0     0    40    0 ");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "WAVE  ¬¬.¬¬.¬¬.¬¬.¬¬.¬¬.¬.¬¬.¬¬¬  ¬¬¬¬¬¬¬¬¬¬  apate                 apate                            4  Ï  (SCRP) empty script                                                     tbd                   1  d  s    0    1    0     0   0s    0  -     0     0     0     0     0    0 ");
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , ""                                           );
   yUNIT_minstr   ("... check WAVE"                     , yENV_upeek     (sm_nwave  , '>')   , "(n/a)"                                      );
   yUNIT_mindnoc  ();

   return 0;
}



char
KOIOS_data_variety      (void)
{   /*  39 lines, but only 14 must be handled  */
   yUNIT_mincond  ("create a variety of data for testing");
   system ("rm -f /tmp/apate.unit    > /dev/null  2>&1");
   system ("echo \"#!/usr/local/bin/koios\"                                                                                                                                        > /tmp/apate.unit");
   system ("echo \"#   koios-polos (axis of heaven) unit testing meta-language\"                                                                                                  >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"#23456789-12  123456789-123456789-123456789-12345  123456789-123456  123456789-123456789-  123456789-  123456789-123456789-  123456789- \"       >> /tmp/apate.unit");
   system ("echo \"#==(verb)===  ===========(description)===========  =====(function)=  ====(arguments)=====  ==(test)==  ====(results)=======  =(var)==== \"       >> /tmp/apate.unit");
   system ("echo \"PREP          global function headers             \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   incl       fake header                          apate.h           \"                                                                                    >> /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"#23456789-12  123456789-123456789-123456789-12345  123456789-123456  123456789-123456789-  123456789-  123456789-123456789-  123456789- \"       >> /tmp/apate.unit");
   system ("echo \"#==(verb)===  ===========(description)===========  =====(function)=  ====(arguments)=====  ==(test)==  ====(results)=======  =(var)==== \"       >> /tmp/apate.unit");
   system ("echo \"SHARED   -a-  prepare files for use                                \"                                                                                  >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"   COND       script input file                   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"     exec     ... check string                     yUNIT_teststring  0                     s_equal     hello                \"                     >> /tmp/apate.unit");
   system ("echo \"     exec     ... check number                     yUNIT_testreal    5                     r_greater   15.0                  h          \"       >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"#23456789-12  123456789-123456789-123456789-12345  123456789-123456  123456789-123456789-  123456789-  123456789-123456789-  123456789- \"       >> /tmp/apate.unit");
   system ("echo \"#==(verb)===  ===========(description)===========  =====(function)=  ====(arguments)=====  ==(test)==  ====(results)=======  =(var)==== \"       >> /tmp/apate.unit");
   system ("echo \"SCRP  [1a/A]  (SCRP) verify openning and closing   2m  quicker     yUNIT_test\"                                                                        >> /tmp/apate.unit");
   system ("echo \"   local      ... working variables                - - - - - - - -   float c = 0;                                               \"                     >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"   COND  (3)  simple openning                     \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"     exec     ... check string                     yUNIT_teststring  4                     s_not       jumbalya             \"                     >> /tmp/apate.unit");
   system ("echo \"     exec     ... check number                     yUNIT_testreal    16                    r_lesser    3.1415927             c          \"       >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"   DITTO (3)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"   REUSE a/b  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"\"                                                                                                                                                             >> /tmp/apate.unit");
   system ("echo \"# end-of-file.  done, finito, completare, whimper [Ï´···\"                                                                                                     >> /tmp/apate.unit");
   yUNIT_minval   ("check scrp lines"                   , yENV_ulines     (sm_nscrp   )         ,   39);
   yUNIT_mindnoc  ();
   return 0;
}

char
KOIOS_topline_unit      (void)
{
   yUNIT_mincond  ("create successful data-set to check topline flow");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"PREP          global function headers             \"                                                                                                       >  /tmp/apate.unit");
   system ("echo \"SCRP  [1a/A]  (SCRP) verify openning and closing    0s  open                         \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED   -a-  prepare files for use                 0s  prepare                      \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED   -b-  remove files after use                0s  remove                       \"                                                              >> /tmp/apate.unit");
   system ("echo \"SECT          now the good stuff                  \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"SCRP          (SCRP) verify system startup          0s  verify      yUNIT_testnum    \"                                                              >> /tmp/apate.unit");
   system ("echo \"SCRP    [1c]  (SCRP) verify normal processing       0s  normal      yUNIT_teststring \"                                                              >> /tmp/apate.unit");
   system ("echo \"SCRP  [1d/s]  (SCRP) empty script                   0s  empty       special stuff    \"                                                              >> /tmp/apate.unit");
   yUNIT_mindnoc  ();
}

char
KOIOS_topline_conv      (void)
{
   yUNIT_mincond  ("verify converted output of topline flow");
   yUNIT_minval   ("check output lines"                 , yENV_ulines      (sm_nscrp   )           ,   77);
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "PREP          global function headers                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1a/A]  (SCRP) verify openning and closing                                  0s  open            -                                                                            ((01.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   1     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SHARED   -a-  prepare files for use                                               0s  prepare         -                                                                            ((aa.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   a     1     0     1     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SHARED   -b-  remove files after use                                              0s  remove          -                                                                            ((bb.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   b     1     0     1     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SECT          now the good stuff                                                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [··/·]  (SCRP) verify system startup                                        0s  verify          yUNIT_testnum                                                                ((02.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   2     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1c/·]  (SCRP) verify normal processing                                     0s  normal          yUNIT_teststring                                                             ((03.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   3     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "SCRP  [1d/s]  (SCRP) empty script                                                 0s  empty           special stuff                                                                ((04.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yENV_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   4     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yENV_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     6     0     2     4     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yENV_upeek       (sm_nscrp   , '>')      , "(n/a)");
   yUNIT_mindnoc  ();
   return 0;
}

char
KOIOS_globals_empty      (void)
{
   yUNIT_mincond ("create an empty sample master.globals");
   system ("echo \"A    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >  /tmp/master.globals");
   system ("echo \"B    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"C    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"D    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"E    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"F    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"G    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"H    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"I    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"J    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"K    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"L    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"M    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"N    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"O    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"P    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"Q    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"R    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"S    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"T    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"U    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"V    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"W    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"X    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"Y    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"Z    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"è    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"é    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ê    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ë    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ì    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"í    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"î    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ï    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ð    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ñ    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ò    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ó    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ô    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"õ    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ö    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"÷    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ø    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ù    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ú    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"û    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ü    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ý    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"þ    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   system ("echo \"ÿ    -1  ·                                                                     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   \"     >> /tmp/master.globals");
   yUNIT_minval  ("... check count"                    , yENV_ulines(sm_nglob)     ,   50);
   yUNIT_mindnoc ();
   return 0;
}

