/*===============================[[ beg-code ]]===============================*/
#include    "master.munit"



char
koios_prog_file  (char a_scrp, char a_list, char a_unit)
{
   char        x_base      [LEN_TITLE] = "";
   char        x_proj      [LEN_LABEL] = "";
   char        x_ext       [LEN_TERSE] = "";

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify file parsing (pre-ySTR)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_mincond  ("verify file in right way");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate"                       , x_base, x_proj, x_ext),    0);
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".unit");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify works the same with NULL in return variables");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate"                       , NULL  , x_proj, x_ext),    0);
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate"                       , x_base, NULL  , x_ext),    0);
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate"                       , x_base, x_proj, NULL ),    0);
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with NULL and empty name");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  (NULL                                , x_base, x_proj, x_ext), -999);
   yUNIT_minval   ("run file"                           , PROG__file  (""                                  , x_base, x_proj, x_ext), -999);
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with a path");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  ("/tmp/koios_apate"                  , x_base, x_proj, x_ext), -999);
   yUNIT_minstr   ("... check base"                     , x_base      , "");
   yUNIT_minstr   ("... check ext"                      , x_ext       , "");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify without project in name");
   system ("touch /tmp/apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  ("apate"                             , x_base, x_proj, x_ext),    0);
   yUNIT_minstr   ("... check base"                     , x_base      , "apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "apate");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".unit");
   system ("rm -f /tmp/apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with a missing file");
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate"                       , x_base, x_proj, x_ext), -999);
   yUNIT_minstr   ("... check base"                     , x_base      , "");
   yUNIT_minstr   ("... check ext"                      , x_ext       , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with illegal characters");
   yUNIT_minval   ("run file"                           , PROG__file  ("apate-two"                         , x_base, x_proj, x_ext), -999);
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apa&te"                      , x_base, x_proj, x_ext), -999);
   yUNIT_minval   ("run file"                           , PROG__file  ("lamdaò"                            , x_base, x_proj, x_ext), -999);
   yUNIT_minval   ("run file"                           , PROG__file  ("one two"                           , x_base, x_proj, x_ext), -999);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify same file, but give extension");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate.unit"                  , x_base, x_proj, x_ext),    0);
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".unit");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify file (but as sunit)");
   system ("touch /tmp/koios_apate.sunit   > /dev/null  2>&1");
   yUNIT_minval   ("run file"                           , PROG__file  ("koios_apate"                       , x_base, x_proj, x_ext),    0);
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".sunit");
   system ("rm -f /tmp/koios_apate.sunit   > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_args  (char a_scrp, char a_list, char a_unit)
{
   char       *x_argA  [3] =  { "koios"             , "--code"       , "koios_apate"      };
   char       *x_argB  [3] =  { "koios"             , "--conv"       , "koios_apate"      };
   char       *x_argC  [3] =  { "koios"             , "--verify"     , "koios_apate"      };
   char       *x_argD  [2] =  { "koios"                              , "koios_apate"      };
   char       *x_argE  [2] =  { "koios"             , "--verify"                          };
   char        x_runtype   =  '-';
   char        x_noise     =  '-';
   char        x_replace   =  '-';
   char        x_base      [LEN_TITLE] = "";
   char        x_proj      [LEN_LABEL] = "";
   char        x_ext       [LEN_TERSE] = "";

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify argument processing");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all ('*', '-');

   yUNIT_mincond  ("verify CODE run");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("call args"                          , PROG__args (3, x_argA, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext),    0);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , G_RUN_CREATE );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '-' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '-' );
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".unit");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt CODE run without existing file");
   yUNIT_minval   ("call args"                          , PROG__args (3, x_argA, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext), -999);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , '·' );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '·' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '·' );
   yUNIT_minstr   ("... check base"                     , x_base      , "");
   yUNIT_minstr   ("... check project"                  , x_proj      , "");
   yUNIT_minstr   ("... check ext"                      , x_ext       , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify CONV run");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("call args"                          , PROG__args (3, x_argB, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext),    0);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , G_RUN_UPDATE );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '-' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , 'r' );
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".unit");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with no mode");
   yUNIT_minval   ("call args"                          , PROG__args (2, x_argD, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext), -999);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , '·' );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '·' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '·' );
   yUNIT_minstr   ("... check base"                     , x_base      , "");
   yUNIT_minstr   ("... check project"                  , x_proj      , "");
   yUNIT_minstr   ("... check ext"                      , x_ext       , "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify VERIFY run");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("call args"                          , PROG__args (3, x_argC, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext),    0);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , G_RUN_UPDATE );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '-' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '-' );
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".unit");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt VERIFY run without file");
   system ("touch /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_minval   ("call args"                          , PROG__args (2, x_argE, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext), -999);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , '·' );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '·' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '·' );
   yUNIT_minstr   ("... check base"                     , x_base      , "");
   yUNIT_minstr   ("... check project"                  , x_proj      , "");
   yUNIT_minstr   ("... check ext"                      , x_ext       , "");
   system ("rm -f /tmp/koios_apate.unit    > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify VERIFY run on an sunit");
   system ("touch /tmp/koios_apate.sunit   > /dev/null  2>&1");
   yUNIT_minval   ("call args"                          , PROG__args (3, x_argC, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext),    0);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , G_RUN_UPDATE );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '-' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '-' );
   yUNIT_minstr   ("... check base"                     , x_base      , "koios_apate");
   yUNIT_minstr   ("... check project"                  , x_proj      , "koios");
   yUNIT_minstr   ("... check ext"                      , x_ext       , ".sunit");
   system ("rm -f /tmp/koios_apate.sunit   > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt CODE run on an sunit");
   system ("touch /tmp/koios_apate.sunit   > /dev/null  2>&1");
   yUNIT_minval   ("call args"                          , PROG__args (3, x_argA, &x_runtype, &x_noise, &x_replace, x_base, x_proj, x_ext), -999);
   yUNIT_minchr   ("... check runtype"                  , x_runtype   , '·' );
   yUNIT_minchr   ("... check noise"                    , x_noise     , '·' );
   yUNIT_minchr   ("... check replace"                  , x_replace   , '·' );
   yUNIT_minstr   ("... check base"                     , x_base      , "");
   yUNIT_minstr   ("... check project"                  , x_proj      , "");
   yUNIT_minstr   ("... check ext"                      , x_ext       , "");
   system ("rm -f /tmp/koios_apate.sunit   > /dev/null  2>&1");
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_dawn  (char a_scrp, char a_list, char a_unit)
{
   char        t           [LEN_HUND]  = "";
   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify program start-up");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   sprintf (t, "touch %s", sm_nscrp);

   yUNIT_mincond  ("run DAWN as CREATE");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (G_RUN_CREATE , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   10);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   14);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    1);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    1);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    1);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    1);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   sm_mmark = KOIOS_main_beg (__FILE__, __LINE__, sm_mmark);
   sm_cmark = KOIOS_code_beg (__FILE__, __LINE__, sm_cmark);
   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DAWN as non-existant run type");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (G_RUN_DEFAULT, sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select), -999);
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   -1);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    0);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DAWN as DEBUG");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (G_RUN_DEBUG  , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   10);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   14);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    1);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    1);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    1);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    1);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   sm_mmark = KOIOS_main_beg (__FILE__, __LINE__, sm_mmark);
   sm_cmark = KOIOS_code_beg (__FILE__, __LINE__, sm_cmark);
   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DAWN as UPDATE");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (G_RUN_UPDATE , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   -1);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,    2);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    1);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    1);
   yUNIT_mindnoc  ();

   sm_vmark = KOIOS_conv_beg (sm_vmark);
   KOIOS_close_all ('*');

   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_dusk  (char a_scrp, char a_list, char a_unit)
{
   char        t           [LEN_HUND]  = "";
   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify program shut-up");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   sprintf (t, "touch %s", sm_nscrp);

   yUNIT_mincond  ("run DUSK as CREATE");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (     G_RUN_CREATE      , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("run dusk"                           , PROG_dusk  ('y', G_RUN_CREATE , '-', sm_nscrp, &sm_scrp, sm_nline , sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, sm_share , sm_select) ,    0); 
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   97);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    0);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   sm_cmark = KOIOS_code_beg         (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_end         (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_stats       (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_verbs       (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_main        (__FILE__, __LINE__, sm_cmark);
   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DAWN as non-existant run type");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (     G_RUN_DEFAULT     , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select), -999);
   yUNIT_minval   ("run dusk"                           , PROG_dusk  ('y', G_RUN_DEFAULT, '-', sm_nscrp, &sm_scrp, sm_nline , sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, sm_share , sm_select) , -999); 
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   -1);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    0);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DUSK as DEBUG");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (     G_RUN_DEBUG       , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("run dusk"                           , PROG_dusk  ('y', G_RUN_DEBUG  , '-', sm_nscrp, &sm_scrp, sm_nline , sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, sm_share , sm_select) ,    0); 
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   97);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    0);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   sm_cmark = KOIOS_code_beg         (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_end         (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_stats       (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_verbs       (__FILE__, __LINE__, sm_cmark);
   sm_cmark = KOIOS_code_main        (__FILE__, __LINE__, sm_cmark);
   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DUSK as UPDATE");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (     G_RUN_UPDATE      , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("run dusk"                           , PROG_dusk  ('y', G_RUN_UPDATE , '-', sm_nscrp, &sm_scrp, sm_nline , sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, sm_share , sm_select) ,    0); 
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,    0);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   -1);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   11);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,   -1);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    0);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   sm_vmark = KOIOS_conv_beg (sm_vmark);
   sm_vmark = KOIOS_conv_end (sm_vmark);
   KOIOS_close_all ('*');

   yUNIT_mincond  ("run DUSK as UPDATE (with good/replace)");
   yUNIT_minval   ("... create scrp file"               , system (t)             ,    0);
   yUNIT_minval   ("run dawn"                           , PROG_dawn  (     G_RUN_UPDATE      , sm_nscrp, &sm_scrp, &sm_nline, sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, &sm_share, &sm_select),    0);
   yUNIT_minval   ("run dusk"                           , PROG_dusk  ('y', G_RUN_UPDATE , 'r', sm_nscrp, &sm_scrp, sm_nline , sm_nmain, &sm_main, sm_ncode, &sm_code, sm_nwave, &sm_wave, sm_nconv, &sm_conv, sm_share , sm_select) ,    0); 
   yUNIT_minval   ("check scrp lines"                   , yenv_ulines     (sm_nscrp   )         ,   11);
   yUNIT_minval   ("check code lines"                   , yenv_ulines     (sm_ncode   )         ,   -1);
   yUNIT_minval   ("check main lines"                   , yenv_ulines     (sm_nmain   )         ,   -1);
   yUNIT_minval   ("check conv lines"                   , yenv_ulines     (sm_nconv   )         ,   -1);
   yUNIT_minval   ("check old lines"                    , yenv_ulines     (sm_nold    )         ,    0);
   yUNIT_minptr   ("... check scrp pointer"             , sm_scrp                ,    0);
   yUNIT_minptr   ("... check main pointer"             , sm_main                ,    0);
   yUNIT_minptr   ("... check code pointer"             , sm_code                ,    0);
   yUNIT_minptr   ("... check wave pointer"             , sm_wave                ,    0);
   yUNIT_minptr   ("... check conv pointer"             , sm_conv                ,    0);
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_driver  (char a_scrp, char a_list, char a_unit)
{
   char        x_last      [LEN_LABEL] = "";
   int         x_nrecd     =    0;
   char        x_under     =  '-';
   char        x_ditto     =  '-';
   char        x_dittoing  =  '-';
   char        x_dtarget   =  '-';
   int         x_dstart    =    0;
   int         x_dline     =    0;
   char        x_major     =  '-';
   char        x_minor     =  '-';

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify program driver");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   KOIOS_data_variety ();
   KOIOS_open_all  ('*', 'y');

   yUNIT_mincond  ("run single DRIVER as CREATE (prep)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,    8);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    1);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'P');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "PREP");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '2');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           , NULL);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "global function headers");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (incl)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,    9);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    2);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'P');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "incl");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '3');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "fake header");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "apate.h");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (global)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   10);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    3);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'P');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "global");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'p');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "global variable");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "int h = 0;");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (shared)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   16);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    4);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'S');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  'a');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "SHARED");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  's');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "prepare files for use");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "-");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "0s");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "tbd");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  'a');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (cond)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   18);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    5);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "COND");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '2');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "script input file");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (exec)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   19);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    6);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "exec");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'f');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... check string");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_teststring");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "0");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "s_equal");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "hello");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (exec)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   20);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    7);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "exec");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'f');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... check number");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_testreal");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "5");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "r_greater");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "15.0");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "h");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (scrp)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   26);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    8);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'S');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "SCRP");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  's');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "(SCRP) verify openning and closing");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_test");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "2m");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "quicker");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "1a/A");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (local)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   27);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,    9);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'S');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "local");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'p');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... working variables");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "float c = 0;");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (cond)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   29);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   10);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '3');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "COND");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '2');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "simple openning");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '3');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (exec)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   30);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   11);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "exec");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'f');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... check string");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_teststring");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "4");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "s_not");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "jumbalya");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (exec)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   31);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   12);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,    0);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "exec");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'f');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... check number");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_testreal");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "16");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "r_lesser");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "3.1415927");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "c");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (ditto)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   33);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   13);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '3');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  'y');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '3');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,   29);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,    0);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "DITTO");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '1');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           , NULL);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "[ simple openning ]- - - - - - - - - - - - - - - - - - - - - - - - - ");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '3');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (cond)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   33);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   14);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  'y');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '3');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,   29);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,   29);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "COND");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '2');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "simple openning");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (exec)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   33);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   15);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  'y');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '3');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,   29);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,   30);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "exec");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'f');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... check string");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_teststring");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "4");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "s_not");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "jumbalya");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (exec)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   33);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   16);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  'y');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '3');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,   29);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,   31);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "exec");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  'f');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "... check number");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "yUNIT_testreal");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "16");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "r_lesser");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "3.1415927");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "c");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  '-');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  '-');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (reuse)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    1);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   35);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   17);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,   -1);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,   -1);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  'a');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  'b');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify central data");
   yUNIT_minstr   ("... verb"                           , my_cur.c_verb           ,  "REUSE");
   yUNIT_minchr   ("... spec"                           , my_cur.c_spec           ,  '1');
   yUNIT_minval   ("... vers"                           , my_cur.c_vers           ,    0);
   yUNIT_minptr   ("... code pointer"                   , my_cur.c_code           ,    1);
   yUNIT_minptr   ("... conv pointer"                   , my_cur.c_conv           ,    1);
   yUNIT_minstr   ("... description"                    , my_cur.c_desc           ,  "[ prepare files for use ]- - - - - - - - - - - - - - - - - - - - - - ");
   yUNIT_minstr   ("... method"                         , my_cur.c_method         ,  "");
   yUNIT_minstr   ("... args"                           , my_cur.c_args           ,  "");
   yUNIT_minstr   ("... test"                           , my_cur.c_test           ,  "");
   yUNIT_minstr   ("... expect"                         , my_cur.c_expect         ,  "");
   yUNIT_minstr   ("... return"                         , my_cur.c_return         ,  "");
   yUNIT_minstr   ("... stage"                          , my_cur.c_stage          ,  "··/·");
   yUNIT_minchr   ("... ditto"                          , my_cur.c_ditto          ,  '-');
   yUNIT_minchr   ("... major"                          , my_cur.c_major          ,  'a');
   yUNIT_minchr   ("... minor"                          , my_cur.c_minor          ,  'b');
   yUNIT_minstr   ("... which"                          , my_cur.c_which          ,  "");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("run single DRIVER as CREATE (done)");
   yUNIT_minval   ("run driver"                         , PROG_driver  ('-', G_RUN_CREATE , sm_nscrp, &sm_nline, &sm_scrp, sm_main, sm_code, sm_wave, sm_conv, x_last, &x_nrecd, &x_under, &x_ditto, &x_dittoing, &x_dtarget, &x_dstart, &x_dline, &x_major, &x_minor, &sm_share, &sm_select),    0);
   yUNIT_minval   ("... check line number"              , sm_nline                ,   39);
   yUNIT_minval   ("... check records used"             , x_nrecd                 ,   17);
   yUNIT_minchr   ("... check under"                    , x_under                 ,  'C');
   yUNIT_minchr   ("... check ditto"                    , x_ditto                 ,  '-');
   yUNIT_minchr   ("... check dittoing"                 , x_dittoing              ,  '-');
   yUNIT_minchr   ("... check ditto target"             , x_dtarget               ,  '-');
   yUNIT_minval   ("... check ditto start"              , x_dstart                ,   -1);
   yUNIT_minval   ("... check ditto line"               , x_dline                 ,   -1);
   yUNIT_minchr   ("... check major"                    , x_major                 ,  '-');
   yUNIT_minchr   ("... check minor"                    , x_minor                 ,  '-');
   yUNIT_minchr   ("... check share"                    , sm_share                ,  '-');
   yUNIT_minchr   ("... check select"                   , sm_select               ,  '-');
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_scrps      (char a_scrp, char a_list, char a_unit)
{
   char       *x_argA  [3] =  { "koios_debug"       , "--conv"       , "apate"      };
   char       *x_argB  [3] =  { "koios_debug"       , "--conv"       , "master"     };

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify script placements and data in normal units");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all  ('*', '-');
   KOIOS_reset ();
   KOIOS_globals_empty ();

   KOIOS_topline_unit ();
   yerr_ureset    ();
   yUNIT_mincond  ("verify passible topline");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_mindnoc  ();
   KOIOS_topline_conv ();

   yUNIT_mincond  ("verify PREP can not come after SCRP");
   yerr_ureset    ();
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SCRP          (SCRP) verify system startup          0s  tbd                          \"                                                              >  /tmp/apate.unit");
   system ("echo \"PREP          global function headers             \"                                                                                                       >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    1);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:2:0: error: verb åPREPæ is good; BUT, under (S) while needs to be under (-)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify SCRP can come first");
   yerr_ureset    ();
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SCRP          (SCRP) verify system startup          0s  tbd                          \"                                                              >  /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nscrp  ),   20);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SCRP  [··/·]  (SCRP) verify system startup                                        0s  tbd             -                                                                            ((01.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   1     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify SCRP with no additional data is legal");
   yerr_ureset    ();
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SCRP                                                   \"                                                              >  /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nscrp  ),   20);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SCRP  [··/·]  [ - - - - - - (empty) - - - - - - ]                                 0s  tbd             -                                                                            ((01.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   1     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     1     0     0     1     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt SHARED with illegal ids");
   yerr_ureset    ();
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SHARED        chance to share                          \"                                                              >  /tmp/apate.unit");
   system ("echo \"SHARED   -A-  chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED   -ò-  chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED    a   chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED   [a]  chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED   (a)  chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"SHARED   -1-  chance to share                          \"                                                              >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    7);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:1:0: error: åSHAREDæ missing valid identifier string, e.g., å-a-æ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:2:0: error: åSHARED   -A-æ identifier (A) not valid åABCDEFGHIJKLMNOPQRSTUVWXYZæ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:3:0: error: åSHARED   -ò-æ identifier (ò) not valid åABCDEFGHIJKLMNOPQRSTUVWXYZæ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:4:0: error: åSHARED    aæ missing valid identifier string, e.g., å-a-æ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:5:0: error: åSHARED   [a]æ missing valid identifier string, e.g., å-a-æ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:6:0: error: åSHARED   (a)æ missing valid identifier string, e.g., å-a-æ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:7:0: error: åSHARED   -1-æ identifier (1) not valid åABCDEFGHIJKLMNOPQRSTUVWXYZæ");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt GLOBAL/CONFIG in normal unit");
   yerr_ureset    ();
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"GLOBAL   -A-  chance to share                          \"                                                              >  /tmp/apate.unit");
   system ("echo \"CONFIG   -ò-  chance to share                          \"                                                              >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    2);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:1:0: error: verb åGLOBALæ good; BUT, not allowed outside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:2:0: error: verb åCONFIGæ good; BUT, not allowed outside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   KOIOS_topline_unit ();
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_mincond  ("attempt SCRP/SHARED in master unit");
   yerr_ureset    ();
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    7);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "master.unit:2:0: error: verb åSCRPæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:3:0: error: verb åSHAREDæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:4:0: error: verb åSHAREDæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:5:0: error: verb åSECTæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:6:0: error: verb åSCRPæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:7:0: error: verb åSCRPæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:8:0: error: verb åSCRPæ good; BUT, not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify GLOBAL/CONFIG in master unit");
   yerr_ureset    ();
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"PREP          global function headers             \"                                                                     >  /tmp/apate.unit");
   system ("echo \"GLOBAL   -A-  chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("echo \"CONFIG   -ò-  chance to share                          \"                                                              >> /tmp/apate.unit");
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nmast  ),   35);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "PREP          global function headers                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "GLOBAL   -A-  chance to share                                                     0s  tbd             -                                                                            ((AA.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nmast   , '>')      , "   LABOLG     global shared code statistics -----------------------------------   A     1     1     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "CONFIG   -ò-  chance to share                                                     0s  tbd             -                                                                            ((òò.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nmast   , '>')      , "   GIFNOC     global shared code statistics -----------------------------------   ò     1     1     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "RETSAM        final master file statistics ------------------------------------   -     2     2     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_globals    (char a_scrp, char a_list, char a_unit)
{
   char       *x_argA  [3] =  { "koios_debug"       , "--conv"       , "apate"      };
   char       *x_argB  [3] =  { "koios_debug"       , "--conv"       , "master"     };

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify globals placement and contents");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all   ('*', '-');
   KOIOS_reset      ();
   KOIOS_globals_empty ();

   yerr_ureset    ();
   yUNIT_mincond  ("verify passible placement");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"PREP          global function headers             \"                                                                                                       >  /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nscrp  ),   18);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "PREP          global function headers                                            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   global     global variable                      - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     0     0     0     0     0     0     0  ··········     0  ·                        0  ·                        0     0     0     0     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc  ();

   yerr_ureset    ();
   yUNIT_mincond  ("attempt a global in a SCRP and SHARED");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SCRP  [1a/A]  (SCRP) verify openning and closing    0s  open                         \"                                                              >  /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"SHARED   -a-  prepare files for use                 0s  prepare                      \"                                                              >> /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"   COND  (3)  simple openning                     \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    3);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:2:0: error: verb åglobalæ is good; BUT, under (S) while needs to be under (P)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:4:0: error: verb åglobalæ is good; BUT, under (S) while needs to be under (P)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:6:0: error: verb åglobalæ is good; BUT, under (C) while needs to be under (P)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   yerr_ureset    ();
   yUNIT_mincond  ("attempt a global in a GLOBAL and CONFIG");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"GLOBAL   -B-  example global                        0s  open                         \"                                                              >  /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"CONFIG   -ê-  example config                        0s  prepare                      \"                                                              >> /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"   COND  (3)  simple openning                     \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   global     global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    3);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "master.unit:2:0: error: verb åglobalæ is good; BUT, under (S) while needs to be under (P)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:4:0: error: verb åglobalæ is good; BUT, under (S) while needs to be under (P)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:6:0: error: verb åglobalæ is good; BUT, under (C) while needs to be under (P)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_conds      (char a_scrp, char a_list, char a_unit)
{
   char       *x_argA  [3] =  { "koios_debug"       , "--conv"       , "apate"      };
   char       *x_argB  [3] =  { "koios_debug"       , "--conv"       , "master"     };

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify condition-level placement and contents");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all   ('*', '-');
   KOIOS_reset      ();
   KOIOS_globals_empty ();

   yerr_ureset    ();
   yUNIT_mincond  ("verify passible placement in normal unit");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SHARED   -a-  prepare files for use                 0s  prepare                      \"                                                              >  /tmp/apate.unit");
   system ("echo \"   local      local variable                       - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"SHARED   -b-  prepare more files                    0s  more                         \"                                                              >> /tmp/apate.unit");
   system ("echo \"   local      local variable                       - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"   COND  (9)  script input file                   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   GROUP      round one                           \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   DITTO (9)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   REUSE a/*  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"SCRP  [1a/A]  (SCRP) verify openning and closing    0s  open                         \"                                                              >> /tmp/apate.unit");
   system ("echo \"   local      local variable                       - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"   COND  (3)  script large output file            \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   GROUP      round two                           \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   DITTO (3)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   REUSE b/k  - - - - - - - - - - - - - - - - -   \"                                                                                                       >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nscrp  ),   57);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SHARED   -a-  prepare files for use                                               0s  prepare         -                                                                            ((aa.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   local      local variable                       - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   a     1     0     1     0     0     0     0  ··········     0  ·                        0  ·                        0     1     0     1     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SHARED   -b-  prepare more files                                                  0s  more            -                                                                            ((bb.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   local      local variable                       - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   COND  (9)  script input file                                                  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((bb.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   GROUP      ===[[ round one ]]===============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   DITTO (9)  [ script input file ]- - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((bb.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   REUSE a/*  [ prepare files for use ]- - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((bb.003))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   b     1     0     1     0     3     1     1  ·········1     1  a                        0  ·                        0     1     0     1     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SCRP  [1a/A]  (SCRP) verify openning and closing                                  0s  open            -                                                                            ((01.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   local      local variable                       - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   COND  (3)  script large output file                                           - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   GROUP      ===[[ round two ]]===============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   DITTO (3)  [ script large output file ] - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   REUSE b/k  [ prepare more files ] - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.003))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   1     1     0     0     1     3     1     1  ···1······     1  b                        0  ·                        0     1     0     1     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     3     0     2     1     6     2     2  ··········     2  ab                       0  ·                        0     3     0     3     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc  ();

   yerr_ureset    ();
   yUNIT_mincond  ("verify passible placement in master unit");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"CONFIG   -ò-  prepare files for use                 0s  prepare                      \"                                                              >  /tmp/apate.unit");
   system ("echo \"   local      local variable                       - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"   COND  (9)  script input file                   \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   GROUP      round one                           \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   DITTO (9)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"GLOBAL   -B-  prepare more files                    0s  more                         \"                                                              >> /tmp/apate.unit");
   system ("echo \"   local      local variable                       - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("echo \"   COND  (3)  script large output file            \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   GROUP      round two                           \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   DITTO (3)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nmast  ),   43);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "CONFIG   -ò-  prepare files for use                                               0s  prepare         -                                                                            ((òò.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   local      local variable                       - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   COND  (9)  script input file                                                  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((òò.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   GROUP      ===[[ round one ]]===============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   DITTO (9)  [ script input file ]- - - - - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((òò.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nmast   , '>')      , "   GIFNOC     global shared code statistics -----------------------------------   ò     1     1     0     0     2     1     1  ·········1     0  ·                        0  ·                        0     1     0     1     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "GLOBAL   -B-  prepare more files                                                  0s  more            -                                                                            ((BB.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   local      local variable                       - - - - - - - - - - - - -   int h = 0;                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   COND  (3)  script large output file                                           - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((BB.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   GROUP      ===[[ round two ]]===============================================  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   DITTO (3)  [ script large output file ] - - - - - - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((BB.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nmast   , '>')      , "   LABOLG     global shared code statistics -----------------------------------   B     1     1     0     0     2     1     1  ···1······     0  ·                        0  ·                        0     1     0     1     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nmast   , '>')      , "RETSAM        final master file statistics ------------------------------------   -     2     2     0     0     4     2     2  ··········     0  ·                        0  ·                        0     2     0     2     0     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc  ();

   yerr_ureset    ();
   yUNIT_mincond  ("attempt a COND under PREP");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"PREP          prepare files for use               \"                                                                                                       >   /tmp/apate.unit");
   system ("echo \"   COND       script input file                   \"                                                                                                       >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    1);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:2:0: error: verb åCONDæ is good; BUT, under (P) while needs to be under (S)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   yerr_ureset    ();
   yUNIT_mincond  ("attempt a REUSE in master");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"GLOBAL   -J-  prepare files for use                 0s  prepare                      \"                                                              >   /tmp/apate.unit");
   system ("echo \"   REUSE B/*  global variable                      - - - - - - - -   int h = 0;                                                  \"                    >> /tmp/apate.unit");
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    1);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "master.unit:2:0: error: åREUSEæ verb not allowed inside master.unit");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   yerr_ureset    ();
   yUNIT_mincond  ("attempt DITTO before defined");
   system ("rm -f /tmp/apate.unit   > /dev/null  2>&1");
   system ("echo \"SCRP          (SCRP) verify openning and closing    0s  open                         \"                                                              >  /tmp/apate.unit");
   system ("echo \"   COND  (0)  script large output file            \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"   DITTO (3)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   system ("echo \"SCRP          (SCRP) another script                 0s  open                         \"                                                              >> /tmp/apate.unit");
   system ("echo \"   DITTO (0)  - - - - - - - - - - - - - - - - - - \"                                                                                                       >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    2);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:3:0: error: DITTO identifier (3) not set by previous COND in current SCRP/SHARE");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:5:0: error: DITTO identifier (0) not set by previous COND in current SCRP/SHARE");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc  ();

   KOIOS_close_all ('*');
   yUNIT_minprcs  ();
   return 0;
}

char
koios_prog_steps      (char a_scrp, char a_list, char a_unit)
{
   char       *x_argA  [3] =  { "koios_debug"       , "--conv"       , "apate"      };
   char       *x_argB  [3] =  { "koios_debug"       , "--conv"       , "master"     };

   yUNIT_minscrpy ("koios", "koios_prog", "(PROG) verify step-level placement and contents");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   KOIOS_open_all   ('*', '-');
   KOIOS_reset      ();
   KOIOS_globals_empty ();

   yUNIT_mincond ("verify step-level verbs in normal unit");
   system ("echo \"SHARED -z-  overall shared code      0s  shared     \"                                 >  /tmp/apate.unit");
   system ("echo \"COND        generate a summary      \"                                                     >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"get         ... check number         yUNIT_testreal    5   r_greater   15.0    \"  >> /tmp/apate.unit");
   system ("echo \"echo        ... check integer        - - - - - - - -   h   i_equal     2       \"  >> /tmp/apate.unit");
   system ("echo \"COND        follow-up with empty    \"                                                     >> /tmp/apate.unit");
   system ("echo \"system      ... run little           - - - - - - - -   /bin/false       \"             >> /tmp/apate.unit");
   system ("echo \"load        ... prep data for read   stdin             one two three    \"             >> /tmp/apate.unit");
   system ("echo \"code        ... alter variable       - - - - - - - -   j = 5;           \"             >> /tmp/apate.unit");
   system ("echo \"file        ... start file           - - - - - - - -   test.txt         \"             >> /tmp/apate.unit");
   system ("echo \"append      ... first line           - - - - - - - -   weehoo           \"             >> /tmp/apate.unit");
   system ("echo \"appvis      ... next line            - - - - - - - -   voodoo           \"             >> /tmp/apate.unit");
   system ("echo \"mode        forced fail              FORCED_FAIL\"                                         >> /tmp/apate.unit");
   system ("echo \"SCRP        global internal steps    0s  internal   \"                                 >> /tmp/apate.unit");
   system ("echo \"COND        generate a summary      \"                                                     >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"get         ... check number         yUNIT_testreal    5   r_greater   15.0    \"  >> /tmp/apate.unit");
   system ("echo \"echo        ... check integer        - - - - - - - -   h   i_equal     2       \"  >> /tmp/apate.unit");
   system ("echo \"COND        follow-up with empty    \"                                                     >> /tmp/apate.unit");
   system ("echo \"system      ... run little           - - - - - - - -   /bin/false       \"             >> /tmp/apate.unit");
   system ("echo \"load        ... prep data for read   stdin             one two three    \"             >> /tmp/apate.unit");
   system ("echo \"code        ... alter variable       - - - - - - - -   j = 5;           \"             >> /tmp/apate.unit");
   system ("echo \"file        ... start file           - - - - - - - -   test.txt         \"             >> /tmp/apate.unit");
   system ("echo \"append      ... first line           - - - - - - - -   weehoo           \"             >> /tmp/apate.unit");
   system ("echo \"appvis      ... next line            - - - - - - - -   voodoo           \"             >> /tmp/apate.unit");
   system ("echo \"mode        forced fail              FORCED_FAIL\"                                         >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nscrp  ),   57);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SHARED   -z-  overall shared code                                                 0s  shared          -                                                                            ((zz.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   COND       generate a summary                                                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((zz.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     get      ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     echo     ... check integer                    - - - - - - - - - - - - -   h                                                                                                     i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   COND       follow-up with empty                                               - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((zz.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     system   ... run little                       - - - - - - - - - - - - -   /bin/false                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     load     ... prep data for read               stdin                       one two three                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     code     ... alter variable                   - - - - - - - - - - - - -   j = 5;                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     file     ... start file                       - - - - - - - - - - - - -   test.txt                                                                                                                                                                                                                   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     append   ... first line                       - - - - - - - - - - - - -   weehoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     appvis   ... next line                        - - - - - - - - - - - - -   voodoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     mode     forced fail                          FORCED_FAIL                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   DERAHS     local shared code statistics ------------------------------------   z     1     0     1     0     2     2     0  ··········     0  ·                        0  ·                        0    10     7     0     3     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "SCRP  [··/·]  global internal steps                                               0s  internal        -                                                                            ((01.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   COND       generate a summary                                                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     get      ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     echo     ... check integer                    - - - - - - - - - - - - -   h                                                                                                     i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "   COND       follow-up with empty                                               - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((01.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     system   ... run little                       - - - - - - - - - - - - -   /bin/false                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     load     ... prep data for read               stdin                       one two three                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     code     ... alter variable                   - - - - - - - - - - - - -   j = 5;                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     file     ... start file                       - - - - - - - - - - - - -   test.txt                                                                                                                                                                                                                   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     append   ... first line                       - - - - - - - - - - - - -   weehoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     appvis   ... next line                        - - - - - - - - - - - - -   voodoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "     mode     forced fail                          FORCED_FAIL                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "   #========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check line"                     , yenv_upeek       (sm_nscrp   , '>')      , "   PRCS       script statistics -----------------------------------------------   1     1     0     0     1     2     2     0  ··········     0  ·                        0  ·                        0    10     7     0     3     0     0     0     0     0   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "#===========  =================================================================  ID   TOP======glob====shar====scrp   MID======cond====ditto=and=usage=======local-reuse-and-list============global-reuse-and-list===========skip   BOT======real====vars====void====skip===DITTO====real====void====skip   ");
   yUNIT_minstr   ("... check result"                   , yenv_upeek       (sm_nscrp   , '>')      , "TINU          final unit test statistics --------------------------------------   -     2     0     1     1     4     4     0  ··········     0  ·                        0  ·                        0    20    14     0     6     0     0     0     0     0   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nscrp   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc ();

   return 0;

   yUNIT_mincond ("verify step-level verbs in master unit");
   system ("echo \"CONFIG -ÿ-  overall shared code      0s  shared     \"                                 >  /tmp/apate.unit");
   system ("echo \"COND        generate a summary      \"                                                     >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"get         ... check number         yUNIT_testreal    5   r_greater   15.0    \"  >> /tmp/apate.unit");
   system ("echo \"echo        ... check integer        - - - - - - - -   h   i_equal     2       \"  >> /tmp/apate.unit");
   system ("echo \"COND        follow-up with empty    \"                                                     >> /tmp/apate.unit");
   system ("echo \"system      ... run little           - - - - - - - -   /bin/false       \"             >> /tmp/apate.unit");
   system ("echo \"load        ... prep data for read   stdin             one two three    \"             >> /tmp/apate.unit");
   system ("echo \"code        ... alter variable       - - - - - - - -   j = 5;           \"             >> /tmp/apate.unit");
   system ("echo \"file        ... start file           - - - - - - - -   test.txt         \"             >> /tmp/apate.unit");
   system ("echo \"append      ... first line           - - - - - - - -   weehoo           \"             >> /tmp/apate.unit");
   system ("echo \"appvis      ... next line            - - - - - - - -   voodoo           \"             >> /tmp/apate.unit");
   system ("echo \"mode        FORCED_FAIL             \"                                                     >> /tmp/apate.unit");
   system ("echo \"GLOBAL -Z-  global internal steps    0s  internal   \"                                 >> /tmp/apate.unit");
   system ("echo \"COND        generate a summary      \"                                                     >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"get         ... check number         yUNIT_testreal    5   r_greater   15.0    \"  >> /tmp/apate.unit");
   system ("echo \"echo        ... check integer        - - - - - - - -   h   i_equal     2       \"  >> /tmp/apate.unit");
   system ("echo \"COND        follow-up with empty    \"                                                     >> /tmp/apate.unit");
   system ("echo \"system      ... run little           - - - - - - - -   /bin/false       \"             >> /tmp/apate.unit");
   system ("echo \"load        ... prep data for read   stdin             one two three    \"             >> /tmp/apate.unit");
   system ("echo \"code        ... alter variable       - - - - - - - -   j = 5;           \"             >> /tmp/apate.unit");
   system ("echo \"file        ... start file           - - - - - - - -   test.txt         \"             >> /tmp/apate.unit");
   system ("echo \"append      ... first line           - - - - - - - -   weehoo           \"             >> /tmp/apate.unit");
   system ("echo \"appvis      ... next line            - - - - - - - -   voodoo           \"             >> /tmp/apate.unit");
   system ("echo \"mode        FORCED_FAIL             \"                                                     >> /tmp/apate.unit");
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB),    0);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    0);
   yUNIT_minval   ("... converted count"                , yenv_ulines      (sm_nmast  ),   46);
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , '[')      , "#!/usr/local/bin/koios");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#   koios-polos (axis of heaven) unit testing meta-language");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "CONFIG   -ÿ-  overall shared code                                                 0s  shared          -                                                                            ((ÿÿ.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   COND       generate a summary                                                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((ÿÿ.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     get      ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     echo     ... check integer                    - - - - - - - - - - - - -   h                                                                                                     i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   COND       follow-up with empty                                               - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((ÿÿ.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     system   ... run little                       - - - - - - - - - - - - -   /bin/false                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     load     ... prep data for read               stdin                       one two three                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     code     ... alter variable                   - - - - - - - - - - - - -   j = 5;                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     file     ... start file                       - - - - - - - - - - - - -   test.txt                                                                                                                                                                                                                   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     append   ... first line                       - - - - - - - - - - - - -   weehoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     appvis   ... next line                        - - - - - - - - - - - - -   voodoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     mode     FORCED_FAIL                          - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#23456789-12  123456789-123456789-123456789-12345  123456789-123456789-123456  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789- ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "#==(verb)===  ===========(description)===========  =====(function)===========  ========================(arguments)=================================================================  ==(test)==  ==========================(results)=================================================================  ========(var)======= ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "GLOBAL   -Z-  global internal steps                                               0s  internal        -                                                                            ((ZZ.---))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   COND       generate a summary                                                 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((ZZ.001))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     exec     ... check string                     yUNIT_teststring            0                                                                                                     s_equal     hello                                                                                                ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     get      ... check number                     yUNIT_testreal              5                                                                                                     r_greater   15.0                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     echo     ... check integer                    - - - - - - - - - - - - -   h                                                                                                     i_equal     2                                                                                                    ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "   COND       follow-up with empty                                               - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   ((ZZ.002))  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     system   ... run little                       - - - - - - - - - - - - -   /bin/false                                                                                                                                                                                                                 ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     load     ... prep data for read               stdin                       one two three                                                                                                                                                                                                              ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     code     ... alter variable                   - - - - - - - - - - - - -   j = 5;                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     file     ... start file                       - - - - - - - - - - - - -   test.txt                                                                                                                                                                                                                   ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     append   ... first line                       - - - - - - - - - - - - -   weehoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     appvis   ... next line                        - - - - - - - - - - - - -   voodoo                                                                                                                                                                                                                     ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "     mode     FORCED_FAIL                          - - - - - - - - - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   - - - - -   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "# end-of-file.  done, finito, completare, whimper [Ï´···");
   yUNIT_minstr   ("... header"                         , yenv_upeek       (sm_nmast   , 'Ö')      , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt step-level verbs in PREP/SCRP/SHARE (normal unit)");
   system ("echo \"PREP        overall shared code     \"                                                     >  /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"get         ... check number         yUNIT_testreal    5   r_greater   15.0    \"  >> /tmp/apate.unit");
   system ("echo \"echo        ... check integer        - - - - - - - -   h   i_equal     2       \"  >> /tmp/apate.unit");
   system ("echo \"SCRP        global internal steps    0s  internal   \"                                 >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"SHARED -a-  global internal steps    0s  internal   \"                                 >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argA), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    5);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "apate.unit:2:0: error: verb åexecæ is good; BUT, under (P) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:3:0: error: verb ågetæ is good; BUT, under (P) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:4:0: error: verb åechoæ is good; BUT, under (P) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:6:0: error: verb åexecæ is good; BUT, under (S) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "apate.unit:8:0: error: verb åexecæ is good; BUT, under (S) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt step-level verbs in PREP/SHARE (master unit)");
   system ("echo \"PREP        overall shared code     \"                                                     >  /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"get         ... check number         yUNIT_testreal    5   r_greater   15.0    \"  >> /tmp/apate.unit");
   system ("echo \"echo        ... check integer        - - - - - - - -   h   i_equal     2       \"  >> /tmp/apate.unit");
   system ("echo \"CONFIG -ò-  global internal steps    0s  internal   \"                                 >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("echo \"GLOBAL -A-  global internal steps    0s  internal   \"                                 >> /tmp/apate.unit");
   system ("echo \"exec        ... check string         yUNIT_teststring  0   s_equal     hello   \"  >> /tmp/apate.unit");
   system ("mv -f /tmp/apate.unit  /tmp/master.unit");
   yUNIT_minval   ("call args"                          , PROG_loop  (3, x_argB), -999);
   yUNIT_minval   ("... error count"                    , yerr_ulines (),    5);
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('['), "master.unit:2:0: error: verb åexecæ is good; BUT, under (P) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:3:0: error: verb ågetæ is good; BUT, under (P) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:4:0: error: verb åechoæ is good; BUT, under (P) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:6:0: error: verb åexecæ is good; BUT, under (S) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "master.unit:8:0: error: verb åexecæ is good; BUT, under (S) while needs to be under (C)");
   yUNIT_minstr   ("... error"                          , yerr_upeek  ('>'), "(n/a)");
   yUNIT_mindnoc ();

   /*> KOIOS_close_all ('*');                                                         <*/
   yUNIT_minprcs  ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(startup)------------------------*/
   yUNIT_minunit ("koios_prog");
   /*---(scripts)------------------------*/
   koios_prog_file      (++n, x_list, x_unit);
   koios_prog_args      (++n, x_list, x_unit);
   koios_prog_dawn      (++n, x_list, x_unit);
   koios_prog_dusk      (++n, x_list, x_unit);
   koios_prog_driver    (++n, x_list, x_unit);
   koios_prog_scrps     (++n, x_list, x_unit);
   koios_prog_globals   (++n, x_list, x_unit);
   koios_prog_conds     (++n, x_list, x_unit);
   koios_prog_steps     (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

